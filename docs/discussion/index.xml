<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Discussion on PowerApps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/</link><description>Recent content in Discussion on PowerApps Test Engine</description><generator>Hugo</generator><language>en</language><atom:link href="https://microsoft.github.io/PowerApps-TestEngine/discussion/index.xml" rel="self" type="application/rss+xml"/><item><title>Authentication in Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/authentication/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Authentication is a critical component of the test automation process. This discussion focuses ons browser-based authentication options inside Test Engine. When authenticating as part of tests Test Engine offers a range of options to authenticate with Microsoft Entra.&lt;/p>
&lt;p>&lt;img alt="Test Engine Authentication method overview diagram from browser, certificate and conditional access policies" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/media/authentication-options.png">&lt;/p>
&lt;p>These method can range from using persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/p></description></item><item><title>Building a Sustainability Model</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/building-a-sustainability-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/building-a-sustainability-model/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the fast-paced world of software development, the initial rush of quickly building and deploying a solution can be exhilarating. However, the true challenge lies in keeping your great idea alive and ensuring its sustainability over time. This article explores how to build a sustainability model that not only keeps your solution relevant but also engages the community and stakeholders in the process.&lt;/p>
&lt;h2 id="analogy-from-paper-airplane-to-commercial-jet">Analogy: From Paper Airplane to Commercial Jet&lt;/h2>
&lt;p>Lets look at an analogy of building paper airplane versus a commercial jet to give us an example we can build on to discuss the right sustainability model needed.&lt;/p></description></item><item><title>Data Simulation</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/data-simulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/data-simulation/</guid><description>&lt;h2 id="join-the-discussion">Join the Discussion&lt;/h2>
&lt;p>We invite you to join the conversation and share your thoughts on the following questions. Read on to learn more and voice your opinion!&lt;/p>
&lt;ul>
&lt;li>How do you think data simulation enhances the testing process for low code solutions?&lt;/li>
&lt;li>In what ways do you believe data simulation differs from the traditional concept of mocking?&lt;/li>
&lt;li>What are the key advantages and disadvantages of using mocks in testing, in your experience?&lt;/li>
&lt;li>How can Power Fx commands be utilized to effectively simulate and simplify Dataverse calls and workflows?&lt;/li>
&lt;li>What benefits do you see in using simulations when testing edge cases and exceptions?&lt;/li>
&lt;li>What role do you think Generative AI can play in identifying and generating comprehensive test cases?&lt;/li>
&lt;li>How can the concepts of data simulation and mocking be applied to unit testing of across the platform. For example across both Power Apps and Power Automate Cloud flows?&lt;/li>
&lt;/ul>
&lt;p>We look forward to hearing your insights and engaging in a lively discussion on these topics!&lt;/p></description></item><item><title>Does Every Solution Need Automated Testing?</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/does-every-solution-need-automated-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/does-every-solution-need-automated-testing/</guid><description>&lt;p>In the ever-evolving landscape of software development, the question of whether every solution requires automated testing is a topic of considerable debate. Automated testing, with its promise of efficiency and reliability, has become a cornerstone of modern development practices. However, the necessity and extent of its application can vary significantly depending on the context and nature of the project.&lt;/p>
&lt;h2 id="decisions-and-tradeoffs">Decisions and Tradeoffs&lt;/h2>
&lt;p>Given this context, making decisions can sometimes be challenging. To help with this, we have created the following decision tree. Read on to understand some of these choices and trade-offs.&lt;/p></description></item><item><title>Embracing Testing Strategies for Low-Code Solutions</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/</guid><description>&lt;p>In today&amp;rsquo;s fast-paced digital landscape, the Power Platform has become a cornerstone for many organizations, enabling rapid development and deployment of applications.&lt;/p>
&lt;p>As an Enterprise Architect or someone who works with your Enterprise Architecture team, your role is crucial in ensuring that these solutions are not only agile but also scalable, secure, and reliable. This guide aims to provide a high-level overview of various aspects of testing in the context of low-code solutions, addressing key topics that matter to IT leadership and business leaders who have invested in the Power Platform.&lt;/p></description></item><item><title>Exploring Generative AI with Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/generative-ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/generative-ai/</guid><description>&lt;p>In our upcoming session, we will dive into the transformative capabilities of Generative AI within the Power Apps Test Engine.&lt;/p>
&lt;p>This discussion will highlight two key scenarios: using Generative AI to convert natural language into defined test steps and leveraging AI Builder prompts to create and measure the potential business value of low-code solutions against Objectives and Key Results (OKRs).&lt;/p>
&lt;p>Looking at the wider Generative AI landscape we also have the Co Pilot Studio Testing capabilities can further enhance test automation by integrating with the Power Apps Test Engine. This integration allows for more comprehensive and efficient testing processes, ensuring that all aspects of the application are thoroughly tested.&lt;/p></description></item><item><title>Implementing Effective Automated Testing Strategies in Power Platform Solutions</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Automated testing is a crucial aspect of modern software development, ensuring the reliability and efficiency of solutions. This article explores how to implement effective automated testing strategies in Power Platform solutions, using the CoE Starter Kit Setup and Upgrade wizard as an example. We will discuss the layers of automated testing across Power Apps, Power Automate, and Dataverse.&lt;/p>
&lt;h2 id="getting-started-with-automated-testing">Getting Started with Automated Testing&lt;/h2>
&lt;p>Automated testing can seem daunting at first, but with the right approach, it can be seamlessly integrated into your development process. Here are some steps to get started:&lt;/p></description></item><item><title>Introduction to Testing Approaches</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/</guid><description>&lt;p>When it comes to automated testing of software applications, there are two primary approaches: black box testing and white box testing. These terms might sound technical, but they are quite straightforward once you understand the basics. Let&amp;rsquo;s explore these concepts and see how they apply to Power Apps and look at how to approach and augment these testing approaches.&lt;/p>
&lt;h2 id="the-role-of-manual-testing">The Role of Manual Testing&lt;/h2>
&lt;p>Before we start into the Automated testing which this discussion primarily focuses on, it&amp;rsquo;s important to recognize the significant role that manual testing plays in the overall testing strategy. Automated tests are powerful tools for ensuring consistency and efficiency, but they should not be the sole method of testing.&lt;/p></description></item><item><title>Low Code Power Platform Testing for the Code First Developer</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/</guid><description>&lt;h2 id="notice">Notice&lt;/h2>
&lt;p>This article is intended as a starter for discussion and contains content that is under development. It is based on experiences from teams like the Power CAT Engineering team as they apply low code testing principles to the low code Power Platform solutions they build and maintain. Ideally, this discussion serves as a great starting point to foster collaboration and gain input to help shape low code automation and engineering excellence in the wider low code Power Platform community.&lt;/p></description></item><item><title>Maintainability of Low Code Solutions Using Automation</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/maintainability-of-low-code-solutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/maintainability-of-low-code-solutions/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In today&amp;rsquo;s fast-paced digital landscape, maintaining low code solutions efficiently is crucial for ensuring seamless operations and continuous innovation. Automation plays a pivotal role in enhancing the maintainability and &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/">sustainability&lt;/a> of these solutions by streamlining processes, reducing manual efforts, and ensuring consistency across various environments.&lt;/p>
&lt;h2 id="the-role-of-infrastructure-as-code">The Role of Infrastructure as Code&lt;/h2>
&lt;h3 id="automated-provisioning-of-test-environments">Automated Provisioning of Test Environments&lt;/h3>
&lt;p>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/">Infrastructure as Code (IaC)&lt;/a> is van be key enabler for automating the provisioning of test environments. By defining infrastructure configurations in code, teams can create consistent and repeatable environments with the necessary settings, dependencies, and solution installations. This automated process helps in establishing a robust test matrix that validates installations globally, allowing teams to proactively identify and address issues.&lt;/p></description></item><item><title>Playwright vs Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/playwright-vs-test-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/playwright-vs-test-engine/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When it comes to testing low-code Power Platform applications, a common question arises: why not just use Playwright to directly test a Power App rather than using the Power Apps Test Engine? This discussion aims to explore the strengths and limitations of both tools and provide insights into their best use cases.&lt;/p>
&lt;h2 id="playwright-a-tool-for-code-first-developers">Playwright: A Tool for Code-First Developers&lt;/h2>
&lt;h3 id="general-purpose-web-based-tests">General Purpose Web-Based Tests&lt;/h3>
&lt;p>&lt;a href="https://playwright.dev/">Playwright&lt;/a> is a fantastic tool for code-first developers who are creating general-purpose web-based tests. It offers a robust framework for automating browser interactions and is highly versatile for various web applications. However, when it comes to testing Power Platform applications, there are several considerations to keep in mind.&lt;/p></description></item><item><title>Test Engine and Power Fx</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-engine-powerfx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-engine-powerfx/</guid><description>&lt;p>This discussion post looks at Test Engine from the lens of Power Fx. We will cover the following key topics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>What is Power Fx?&lt;/strong>: A low-code general-purpose programming language based on spreadsheet-like formulas, accessible to a wide range of users due to its roots in Excel.&lt;/li>
&lt;li>&lt;strong>Advanced Topics in Power Fx&lt;/strong>: Includes creating custom functions, integrating with external data sources, and optimizing performance for large-scale applications.&lt;/li>
&lt;li>&lt;strong>Extensibility Model&lt;/strong>: Leverages existing skills and libraries, encapsulates complexity, enhances collaboration, and facilitates integration with external systems.&lt;/li>
&lt;li>&lt;strong>Growing Language&lt;/strong>: Inspired by Excel&amp;rsquo;s Lambda functions, includes functions and modules for greater reuse and parameterization, enhancing flexibility and power.&lt;/li>
&lt;li>&lt;strong>Why Power Fx and Test Engine?&lt;/strong>: Provides a robust framework for testing and validating workflows and applications with declarative YAML definitions and new functions like Assert().
Power Platform Provider Model: Uses a common language for provider-specific functions like &lt;code>SimulateWorkflow()&lt;/code>, &lt;code>SimulateDataverse()&lt;/code>, and &lt;code>SimulateConnector()&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Power Fx as an Intermediate Language in Generative AI&lt;/strong>: Bridges the gap between natural language and specific instructions, essential for generative AI applications.&lt;/li>
&lt;li>&lt;strong>Namespace Actions and Experimental Validation&lt;/strong>: Allows creation and validation of experimental actions before production, ensuring reliability and robustness.&lt;/li>
&lt;li>&lt;strong>Transferability of Skills Across the Platform&lt;/strong>: Consistent language and testing approach across Power Apps, Power Pages, and Power Automate, simplifying the learning curve and enhancing collaboration.&lt;/li>
&lt;/ul>
&lt;h2 id="join-the-discussion">Join The Discussion&lt;/h2>
&lt;p>What aspects of Power Fx are you most curious about, and why?&lt;/p></description></item><item><title>Test Engine Test Authoring</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-authoring/</guid><description>&lt;p>To aid you in quickly getting started we have found a record and replay approach is an effective method to get started.&lt;/p>
&lt;p>Given this experience lets dive in and see some of the options we have explored as we are building low code tests for our solutions.&lt;/p>
&lt;p>&lt;img alt="Example test authoring process" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/media/test-authoring.png">&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this discussion post, we will explore the and overview of authoring test cases using the Test Engine using features that are currently in the development of open source version of Test Engine.&lt;/p></description></item></channel></rss>