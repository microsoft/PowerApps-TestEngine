<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Power Apps Test Engine on PowerApps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/</link><description>Recent content in Power Apps Test Engine on PowerApps Test Engine</description><generator>Hugo</generator><language>en</language><atom:link href="https://microsoft.github.io/PowerApps-TestEngine/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/context/journey-map-assessment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/journey-map-assessment/</guid><description>&lt;h1 id="journey-map-assessment">Journey Map Assessment&lt;/h1>
&lt;div id="surveyContainer">&lt;/div>
&lt;link href="https://unpkg.com/survey-core/defaultV2.min.css" type="text/css" rel="stylesheet">
&lt;script type="text/javascript" src="https://unpkg.com/survey-core/survey.core.min.js">&lt;/script>
&lt;script type="text/javascript" src="https://unpkg.com/survey-js-ui/survey-js-ui.min.js">&lt;/script>
&lt;script type="text/javascript" src="https://unpkg.com/survey-core/themes/default-light-panelless.min.js">&lt;/script>
&lt;style>
.sd-progress-buttons__button span {
 color: #ffffff !important; /* Ensure the color is always white */
}
:root {
 --sjs-primary-backcolor: #1e3a5f; /* Dark blue background */
 --sjs-primary-backcolor-dark: #162d47; /* Even darker blue background */
 --sjs-primary-backcolor-light: #1e3a5f; /* Dark blue background */
 --sjs-primary-forecolor: #0d1b2a; /* Charcoal text color */
 --sjs-primary-forecolor-light: #0d1b2a; /* Charcoal text color */
 --sjs-primary-forecolor-dark: #000000; /* Black text color */
 --sjs-border-color: #1e3a5f; /* Dark blue border color */
 --sjs-border-color-light: #162d47; /* Even darker blue border color */
 --sjs-border-color-dark: #0d1b2a; /* Charcoal border color */
 --sjs-page-title-backcolor: #ffffff; /* Light background for page title */
 --sjs-page-title-forecolor: #1e3a5f; /* Dark blue text color for page title */
 --sjs-page-number-circle-backcolor: #1e3a5f; /* Dark blue background for page number circle */
 --sjs-page-number-text-color: #ffffff; /* White text color for page number */
&lt;p>}
&lt;/style>&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/context/journey-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/journey-map/</guid><description>&lt;h1 id="understanding-the-journey-from-manual-testing-to-automated-testing">Understanding the Journey from Manual Testing to Automated Testing&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Adopting automated testing can be a transformative journey for any organization. This journey involves several stages, each with its own set of challenges and opportunities. In this article, we will explore the key factors that influence the journey from manual testing to automated testing, highlighting both positive and negative impacts. This understanding will help you complete a self-assessment and make informed decisions to improve your testing processes.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/authoring/</guid><description>&lt;h1 id="test-authoring">Test Authoring&lt;/h1>
&lt;p>The following test authoring method exist for different personas to create and edit tests:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Considerations&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Test Studio&lt;/td>
 &lt;td>Record of test and export as Test Engine Yaml&lt;/td>
 &lt;td>1.	Limitations in support as documented in &lt;a href="https://learn.microsoft.com/power-apps/maker/canvas-apps/test-studio#known-limitations">Test Studio - Power Apps | Microsoft Learn&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Visual Studio Code Extension&lt;/td>
 &lt;td>Experimental Visual Studio Code extension that offers Text Completion and Syntax validation&lt;/td>
 &lt;td>1.	Extension are still work in progress&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	More likely to meet the skill level of advanced makers and code first developers&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AI Generated Tests&lt;/td>
 &lt;td>Use of Generative AI to define test cases and test steps&lt;/td>
 &lt;td>1.	AI Generated tests is not yet a Generally available feature.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="generative-ai-in-testing">Generative AI in Testing&lt;/h2>
&lt;p>Generative AI can be used to create test cases, automate repetitive tasks, and analyze test results, enhancing efficiency and accuracy across the board. By using Generative AI the process of creating and editing tests for each persona can be simplified and augumented to improve and maintain test coverage.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/executionanddeploymentprocessintegration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/executionanddeploymentprocessintegration/</guid><description>&lt;h1 id="test-execution-and-deployment-process-integration">Test Execution and Deployment Process Integration&lt;/h1>
&lt;h2 id="execution-agents">Execution Agents&lt;/h2>
&lt;p>Tests can be executed as part of the deployment process using agents configured in Low code Power Automated Hosted Process or Azure DevOps CI/CD pipelines. These agents will:&lt;/p>
&lt;ul>
&lt;li>Run automated tests during the build phase to catch issues early.&lt;/li>
&lt;li>Execute end-to-end tests post-deployment to validate the entire system.&lt;/li>
&lt;/ul>
&lt;h2 id="test-agent-selection">Test Agent Selection&lt;/h2>
&lt;p>The following table outlines some factors that can be considered when selecting a test execution environment for the tests.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/operationaltests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/operationaltests/</guid><description>&lt;h1 id="operational-team-requirements">Operational Team Requirements&lt;/h1>
&lt;p>The operations team could be the original maker or a dedicated team that is responsible for continuous test execution of tests to verify and maintain the health of the deployed solution. Key requirements include:&lt;/p>
&lt;ul>
&lt;li>Monitoring test results and system performance metrics.&lt;/li>
&lt;li>Scheduling regular test runs to detect and address issues proactively.&lt;/li>
&lt;li>Ensuring test environments are aligned with production settings.&lt;/li>
&lt;/ul>
&lt;p>This process extends beyond the initial deployment of the solution but throughout out its entire operational lifetime. Over the life of the solution many changes can occur. For example, changing business requirements, changes in the maker team owning and supporting the solution, updated product features, and updated tenant and environment configurations may necessitate adjustments to the testing and operational processes. The operations team must be prepared to adapt to these changes to ensure the continued reliability and performance of the solution.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/overview/</guid><description>&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>This guidanace provides an overview low code compared to high code testing and end to end context and example.&lt;/p>
&lt;h2 id="low-code-vs-high-code-testing">Low code vs High Code Testing&lt;/h2>
&lt;p>Low code testing involves creating tests using minimal code, often leveraging tools and frameworks that simplify the process. This approach leverages building blocks like Power Fx functions, which is designed to be user-friendly and accessible to those with limited coding experience.&lt;/p>
&lt;p>In contrast, high code testing requires extensive programming knowledge and the use of complex languages like C#, Java, JavaScript or Python. High code solutions also provide a wide array of choices on how the application can be created. These choices make the process of testing these solutions more specialized and require more technical expertise. By utilizing low code testing, developers and makers can quickly and efficiently create tests without the need for deep technical expertise, making it an ideal choice for many Power Platform solutions. The Test Engine approach provides a extension module to allow high code elements to be included as part of a test case.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/personas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/personas/</guid><description>&lt;h1 id="role-of-test-personas">Role of Test Personas&lt;/h1>
&lt;h2 id="different-test-personas">Different Test Personas&lt;/h2>
&lt;p>Different people, ranging from &amp;ldquo;code-first&amp;rdquo; testers to members of the maker community, will play distinct roles in the testing process:&lt;/p>
&lt;ul>
&lt;li>Code-First Testers: Developers with a deep understanding of testing methodologies and tools.&lt;/li>
&lt;li>Maker Community: Business users with limited technical knowledge who can leverage low-code/no-code testing tools.&lt;/li>
&lt;li>Reviewers: Who want to perform gated release and approval of changes and test results cso that they can be reviewed prior to release&lt;/li>
&lt;li>Support Engineers: WHo want to Execute tests that validate functionality and operational health of deployed solution. They may also author new tests to illustrate an issue that needs to be resolved.&lt;/li>
&lt;/ul>
&lt;h2 id="scaling-the-impact-of-testing">Scaling the Impact of testing&lt;/h2>
&lt;p>Scalability is achieved by providing appropriate tools and training for each persona, enabling them to contribute effectively to the testing process. Depending on the team and the technology landscape they could look to mix and match different elements to best support their quality strategy&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/securityconsiderations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/securityconsiderations/</guid><description>&lt;h1 id="security-considerations">Security Considerations&lt;/h1>
&lt;p>Executing tests securely is paramount especially where interactive user accounts are used. The following table outlines some factors that should be considered and how this can map to Power Platform quality testing.&lt;/p>
&lt;h2 id="authentication">Authentication&lt;/h2>
&lt;p>The following authentication options could be considered&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Type&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Considerations&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Browser Persistent Cookies&lt;/td>
 &lt;td>One time login and using persistent cookies for headless login&lt;/td>
 &lt;td>1.	Storage of Browser Context that contains Persistent Cookies&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Configuration of Persistent Cookie settings in Entra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>3.	Conditional Access Policies&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Certificate Based Authentication&lt;/td>
 &lt;td>Configuration of Entra to allow Certificate Based Authentication&lt;/td>
 &lt;td>1.	Issue and Revocation of Certificates&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Certificate renewal process&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Conditional Access Policies&lt;/td>
 &lt;td>Compliance with applied conditional Access polices&lt;/td>
 &lt;td>1.	Supported Browser type selection. For example, Edge, Chrome&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Test Agent network locations&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>3.	Risk profile of users&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="multi-factor-authentication--authenticator-enabled">Multi Factor Authentication – Authenticator Enabled&lt;/h2>
&lt;p>When using Two-factor authentication making use of authentication applications like Microsoft Authenticator consider the following:&lt;/p></description></item><item><title>01 - Introduction</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/01-introduction-to-the-business-value-of-automated-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/01-introduction-to-the-business-value-of-automated-testing/</guid><description>&lt;p>In this section , we will explore the business value of automated testing and discuss key concepts and questions that will help you understand its importance. This discussion-focused module will guide you through the maturity model of an organization, existing investments in automated testing, and business motivators.&lt;/p>
&lt;h2 id="understanding-the-business-value">Understanding the Business Value&lt;/h2>
&lt;p>Automated testing is not just a technical practice; it has significant business implications. Let&amp;rsquo;s start by discussing the following key concepts:&lt;/p></description></item><item><title>01 - Introduction</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/01-introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/01-introduction/</guid><description>&lt;p>As a business leader or low-code maker who supports the business, you need to ensure the reliability, performance, and security of your Power Platform solutions. This means you can&amp;rsquo;t rely solely on manual testing processes, which can be time-consuming and prone to errors. You want to build a solution that quickly meets your business needs while ensuring high quality. The Power Apps Test Engine can help you achieve this without writing extensive code.&lt;/p></description></item><item><title>01 - Reliability</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/architecture/01-reliability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/architecture/01-reliability/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This section provides recommendations for designing a reliability testing strategy to validate and optimize the reliability of your Power Platform workloads. Reliability testing focuses on the resiliency and availability of your workloads, specifically the critical flows identified during the design phase. This guide includes general testing guidance and specific advice on fault injection and chaos engineering.&lt;/p>
&lt;h1 id="definitions">Definitions&lt;/h1>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Term&lt;/th>
 &lt;th>Definition&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Availability&lt;/td>
 &lt;td>The amount of time that an application workload runs in a healthy state without significant downtime.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Chaos engineering&lt;/td>
 &lt;td>The practice of subjecting applications and services to real-world stresses and failures to build and validate resilience.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Fault injection&lt;/td>
 &lt;td>Introducing an error to a system to test its resiliency.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Resiliency&lt;/td>
 &lt;td>An application workload&amp;rsquo;s ability to withstand and recover from failure modes.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="key-design-strategies">Key Design Strategies&lt;/h2>
&lt;p>Testing is essential to ensure that your workload meets its reliability targets and can handle failures gracefully. Fault injection is a type of testing that deliberately introduces faults or stress into your system to simulate real-world scenarios. By using fault injection and chaos engineering techniques, you can proactively discover and fix issues before they affect your production environment.&lt;/p></description></item><item><title>02 - Getting setup</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/02-getting-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/02-getting-setup/</guid><description>&lt;h2 id="pre-requisites-check">Pre-requisites Check&lt;/h2>
&lt;p>Validate that you have completed the pre-requisites check of the &lt;a href="01-introduction.md">Introduction&lt;/a> have been completed.&lt;/p>
&lt;h2 id="solution-setup">Solution Setup&lt;/h2>
&lt;p>If you don&amp;rsquo;t have an environment with the Button Clicker solution, follow these steps to import the solution.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>&lt;br>
Follow these steps to check whether the Button Clicker solution is loaded or not:&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>Open the Power Apps portal.&lt;/li>
&lt;li>Select the environment that’s assigned to you for completing this workshop. If you don’t have an environment, continue with the following steps.&lt;/li>
&lt;li>Select &lt;strong>Apps&lt;/strong> from the left navigation pane.&lt;/li>
&lt;li>Verify that &lt;strong>Button Clicker&lt;/strong> is in &lt;strong>My apps&lt;/strong> or &lt;strong>Shared with me&lt;/strong>.&lt;/li>
&lt;li>If &lt;strong>Button Clicker&lt;/strong> is available, then you can skip this unit and continue to the next unit.&lt;/li>
&lt;/ol>
&lt;h2 id="create-a-new-environment">Create a New Environment&lt;/h2>
&lt;p>To create a new environment, follow these steps:&lt;/p></description></item><item><title>02 - Setting Up People and Processes for Success</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/02-setting-up-people-and-processes-for-success/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/02-setting-up-people-and-processes-for-success/</guid><description>&lt;p>In this section, we will discuss the key elements required to set up people and processes for success in automated testing. This includes identifying the right team members, defining clear roles and responsibilities, and establishing effective processes to ensure smooth implementation and continuous improvement. We will address the needs of two communities: code-first teams incorporating low code in their solutions, and business-driven testing teams creating low code solutions to solve business needs.&lt;/p></description></item><item><title>03 - Driving Innovation with Low-Code Automated Testing</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/03-driving-innovation-with-low-code-automated-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/03-driving-innovation-with-low-code-automated-testing/</guid><description>&lt;p>In today&amp;rsquo;s fast-paced business environment, innovation is key to staying competitive. Low-code platforms provide a powerful way to rapidly build and deploy solutions by abstracting complexity and leveraging existing functionality and connectors. This approach allows organizations to innovate quickly and efficiently, but to fully realize the benefits of low-code development, it&amp;rsquo;s essential to have a similar speed and agility in creating automated tests.&lt;/p>
&lt;h2 id="benefits-of-low-code-development">Benefits of Low-Code Development&lt;/h2>
&lt;p>Low-code platforms, such as Power Platform, enable users to create applications with minimal hand-coding by using visual development tools and pre-built components. This approach offers several benefits:&lt;/p></description></item><item><title>03 - Running Your First Test</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/03-running-your-first-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/03-running-your-first-test/</guid><description>&lt;p>Welcome, early adopters! If you&amp;rsquo;re eager to try the current version of Power Platform Automated Testing, you&amp;rsquo;re in the right place. This module will help you get started with the necessary components to explore automated testing.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>To get started, you&amp;rsquo;ll need the following components:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Ability to Clone Repository&lt;/strong>: Use Git command line or GitHub Desktop to clone the repository.&lt;/li>
&lt;li>&lt;strong>PowerShell&lt;/strong>: Ensure you have PowerShell installed on your machine.&lt;/li>
&lt;li>&lt;strong>Power Platform Command Line Tools&lt;/strong>: Install the Power Platform Command Line tools to interact with your Power Platform environment.&lt;/li>
&lt;li>&lt;strong>.NET 8.0 SDK&lt;/strong>: Download and install the .NET 8.0 SDK to build the code.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>NOTEL These instructions apply to the &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/learning/context/ring-deployment-model/">inner ring&lt;/a> using a build from source strategy. As these changes are included in the &lt;a href="https://learn.microsoft.com/power-platform/developer/cli/reference/test">pac test run&lt;/a> many of these steps are not required.&lt;/p></description></item><item><title>04 - Looking at Results</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/04-looking-at-results/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/04-looking-at-results/</guid><description>&lt;p>After running your tests, it&amp;rsquo;s important to understand how to interpret the results. The Power Apps Test Engine generates a detailed output that helps you analyze the performance and correctness of your tests.&lt;/p>
&lt;h2 id="test-output">Test Output&lt;/h2>
&lt;p>When you run your tests, the Power Apps Test Engine creates a &lt;code>TestOutput&lt;/code> folder. This inside this folder is named with a unique date and time stamp to help you easily identify when the tests were executed. Inside this folder, you&amp;rsquo;ll find several important files and subfolders:&lt;/p></description></item><item><title>04 - Optimizing IT Processes with Low-Code Automated Testing</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/04-optimizing-it-processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/04-optimizing-it-processes/</guid><description>&lt;p>In today&amp;rsquo;s dynamic IT landscape, many organizations have already invested heavily in DevOps processes to streamline their development and deployment workflows. Integrating these existing investments with low-code platforms can further enhance efficiency and innovation. This section will explore how IT teams can extend and integrate their DevOps investments with low-code solutions, focusing on new changes in the Power Platform for Source Control integration, existing connector models for Azure DevOps and GitHub, and the importance of risk and compliance management.&lt;/p></description></item><item><title>05 - Recording Your First Test</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/05-recording-your-first-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/05-recording-your-first-test/</guid><description>&lt;p>While the sample include &lt;code>testPlan.fx.yaml&lt;/code> as an example, you can also create this file by simply interacting with the application. The Power Apps Test Engine provides a record mode that allows you to generate test plans based on your interactions with the app.&lt;/p>
&lt;blockquote>
&lt;p>NOTE: The recording feature is currently under development and improvement. This feature will continue to change and improve in future updates.&lt;/p>
&lt;/blockquote>
&lt;h2 id="steps-to-record-your-first-test">Steps to Record Your First Test&lt;/h2>
&lt;p>Follow these steps to record your first test:&lt;/p></description></item><item><title>05 - Understanding the High-Level Approvals Process</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/05-understanding-the-high-level-approvals-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/05-understanding-the-high-level-approvals-process/</guid><description>&lt;p>In this section, we will explore the high-level approvals process that supports a team development model with tests. This process ensures that when changes are ready for deployment, they are thoroughly reviewed and approved, leveraging a decentralized model that integrates with business processes and DevOps investments.&lt;/p>
&lt;h2 id="team-development-model-with-tests">Team Development Model with Tests&lt;/h2>
&lt;p>The team development model involves collaboration across business, IT, and risk teams to build and test solutions. This collaborative approach ensures that solutions meet business needs, are technically sound, and comply with risk and compliance requirements. Key aspects of this model include:&lt;/p></description></item><item><title>06 - Asserting Results</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/06-asserting-results/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/06-asserting-results/</guid><description>&lt;h2 id="introduction-to-asserts">Introduction to Asserts&lt;/h2>
&lt;p>In automated testing, an &lt;strong>assert&lt;/strong> is a statement that checks if a condition is true. If the condition evaluates to true, the test passes; if it evaluates to false, the test fails. Asserts are crucial for verifying that your application behaves as expected.&lt;/p>
&lt;h2 id="the-assert-power-fx-function">The Assert Power Fx Function&lt;/h2>
&lt;p>The &lt;code>Assert&lt;/code> function in Power Fx takes two arguments:&lt;/p>
&lt;ol>
&lt;li>A boolean expression that evaluates to true or false.&lt;/li>
&lt;li>A message that describes the assertion.&lt;/li>
&lt;/ol>
&lt;p>If the boolean expression evaluates to true, the test step passes. If it evaluates to false, the test step fails, and the provided message helps identify the issue.&lt;/p></description></item><item><title>06 - Building a Sustainability Model</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/06-establishing-a-sustainability-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/06-establishing-a-sustainability-model/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the fast-paced world of software development, the initial rush of quickly building and deploying a solution can be exhilarating. However, the true challenge lies in keeping your great idea alive and ensuring its sustainability over time. This module explores how to build a sustainability model that not only keeps your solution relevant but also engages the community and stakeholders in the process.&lt;/p>
&lt;h2 id="starter-discussion-questions">Starter Discussion Questions&lt;/h2>
&lt;p>Consider how you currently ensure the sustainability of your solutions after the initial deployment:&lt;/p></description></item><item><title>07 - Growing Solutions to Enterprise Grade</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/07-growing-to-enterprise-grade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/business-path/07-growing-to-enterprise-grade/</guid><description>&lt;p>As your low code solutions scale, the need for robust testing practices becomes more critical. Growing to enterprise-grade involves adopting a model that can deploy on demand and rapidly respond to new features, errors, or security requirements. This model relies on the confidence provided by automated tests, allowing you to meet business needs while adhering to continuous integration and deployment (CI/CD) processes.&lt;/p>
&lt;h2 id="the-enterprise-grade-model">The Enterprise-Grade Model&lt;/h2>
&lt;p>An enterprise-grade model is designed to handle the complexities and demands of large-scale applications. It ensures that your solutions are sustainable, reliable, secure, and performant, even as they grow in size and complexity. Key components of this model include:&lt;/p></description></item><item><title>07 - Updating Control Value using SetProperty</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/07-updating-control-value-using-setproperty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/07-updating-control-value-using-setproperty/</guid><description>&lt;h2 id="introduction-to-setproperty">Introduction to SetProperty&lt;/h2>
&lt;p>The &lt;code>SetProperty&lt;/code> function in Power Fx is used to update the value of a control in your Power Apps application. This function allows you to change the properties of controls, such as text, color, visibility, and more.&lt;/p>
&lt;h3 id="syntax">Syntax&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-powerfx" data-lang="powerfx">SetProperty(control.property, value)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>control.property: The property of the control you want to update.&lt;/li>
&lt;li>value: The new value you want to assign to the property.&lt;/li>
&lt;/ul>
&lt;h2 id="example-updating-label-text">Example: Updating Label Text&lt;/h2>
&lt;p>Let&amp;rsquo;s consider a basic example that combines &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/learning/technical/06-asserting-results/">Asserting Results&lt;/a> where we want to update the text of a label control (Label1) to &amp;ldquo;End of the test&amp;rdquo; and make sure changes are applied:&lt;/p></description></item><item><title>08 - Simulated Connector</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/08-simulating-connector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/08-simulating-connector/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this module, we will explore how to use simulated connectors in your Power Apps tests. Simulated connectors allow you to mock network requests, providing predefined responses for testing purposes. This is particularly useful for testing scenarios where you want to control the data returned by external services.&lt;/p>
&lt;h2 id="what-is-mocking">What is Mocking?&lt;/h2>
&lt;p>Mocking is a technique used in software testing to simulate the behavior of real objects. By using mocks, you can create controlled environments where you can test specific parts of your application in isolation. This helps ensure that your tests are reliable and repeatable, as they are not dependent on external factors.&lt;/p></description></item><item><title>09 - Simulating Dataverse</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/09-simulating-dataverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/09-simulating-dataverse/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The &lt;code>Experimental.SimulateDataverse&lt;/code> function allows you to simulate responses from the Dataverse without actually querying the live data. This is particularly useful for testing and development purposes, as it enables you to create predictable and controlled responses for various scenarios.&lt;/p>
&lt;h2 id="what-is-mocking">What is Mocking?&lt;/h2>
&lt;p>Mocking is a technique used in software testing to simulate the behavior of real objects. By using mocks, you can create controlled environments where you can test specific parts of your application in isolation. This helps ensure that your tests are reliable and repeatable, as they are not dependent on external factors.&lt;/p></description></item><item><title>10 - Simulations Example</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/10-using-simulations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/10-using-simulations/</guid><description>&lt;h2 id="learning-objectives">Learning Objectives&lt;/h2>
&lt;p>In this section, you will learn how to load a sample Weather application. This application is designed to call the MSN Weather and then have the user save the current weather at the location and categorize how this weather relates to them. This example highlights a number of items:&lt;/p>
&lt;ul>
&lt;li>Calling the MSN Weather connector and testing how the results of this connector are used by the application.&lt;/li>
&lt;li>Interacting with Dataverse to look at how data queried from Dataverse is used as a collection of data for controls.&lt;/li>
&lt;li>Using Assert statements with a known state setup by the Simulation functions to verify that the application works as expected.&lt;/li>
&lt;/ul>
&lt;p>This section builds on concepts introduced in &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/learning/technical/08-simulating-connector/">Simulating Connector&lt;/a> and &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/learning/technical/09-simulating-dataverse/">Simulating Dataverse&lt;/a>.&lt;/p></description></item><item><title>11 - Localization</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/11-localization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/technical/11-localization/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this section, we will investigate the testing of a localized Weather sample. Localization is the process of adapting an application to meet the language, cultural, and other requirements of a specific target market. The ability to support multiple languages in your application can make it more accessible and user-friendly for a global audience.&lt;/p>
&lt;h2 id="example-localization">Example: Localization&lt;/h2>
&lt;p>Lets look at an example of localization of a Power App&lt;/p>
&lt;blockquote>
&lt;p>NOTES:&lt;/p>
&lt;ol>
&lt;li>If the value does not match the test will return &amp;ldquo;One or more errors occurred. (Exception has been thrown by the target of an invocation.)&amp;rdquo;&lt;/li>
&lt;li>Reload the page to reset the sample to the default state&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>{% powerfx %}
// Settings:
locale: en-us
// Code:
Language()
{% endpowerfx %}&lt;/p></description></item><item><title>Audit</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/audit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/audit/</guid><description>&lt;p>Welcome to the section dedicated to Audit! Here, we&amp;rsquo;ll explore the roles and responsibilities of audit professionals in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into their interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As an audit professional, your primary focus is on ensuring that low-code solutions comply with regulatory requirements and internal policies. You play a crucial role in maintaining an end-to-end audit trail of solutions from idea to delivery. Your responsibilities include:&lt;/p></description></item><item><title>Authentication in Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/authentication/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Authentication is a critical component of the test automation process. This discussion focuses ons browser-based authentication options inside Test Engine. When authenticating as part of tests Test Engine offers a range of options to authenticate with Microsoft Entra.&lt;/p>
&lt;p>&lt;img alt="Test Engine Authentication method overview diagram from browser, certificate and conditional access policies" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/media/authentication-options.png">&lt;/p>
&lt;p>These method can range from using persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/p></description></item><item><title>Bottom-Up Adoption Strategy</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/bottom-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/bottom-up/</guid><description>&lt;p>Welcome to the section dedicated to the Bottom-Up Adoption Strategy! This approach is initiated by individual contributors and teams to drive innovation and adoption from the ground up. Let&amp;rsquo;s explore how this strategy works, its benefits, and how it can be effectively implemented in your organization, especially in the context of adopting automated testing.&lt;/p>
&lt;h2 id="what-is-bottom-up-adoption">What is Bottom-Up Adoption?&lt;/h2>
&lt;p>Bottom-Up Adoption is a strategy where the initiative to adopt new technologies, such as the Power Platform and automated testing, is driven by individual contributors and teams within the organization. This approach encourages innovation and empowers employees to take the lead in adopting and implementing new solutions. It leverages the creativity and expertise of those who are directly involved in day-to-day operations.&lt;/p></description></item><item><title>Building a Sustainability Model</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/building-a-sustainability-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/building-a-sustainability-model/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the fast-paced world of software development, the initial rush of quickly building and deploying a solution can be exhilarating. However, the true challenge lies in keeping your great idea alive and ensuring its sustainability over time. This article explores how to build a sustainability model that not only keeps your solution relevant but also engages the community and stakeholders in the process.&lt;/p>
&lt;h2 id="analogy-from-paper-airplane-to-commercial-jet">Analogy: From Paper Airplane to Commercial Jet&lt;/h2>
&lt;p>Lets look at an analogy of building paper airplane versus a commercial jet to give us an example we can build on to discuss the right sustainability model needed.&lt;/p></description></item><item><title>Business Stakeholders</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/business-stakeholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/business-stakeholders/</guid><description>&lt;p>As a business stakeholder, your role is pivotal in ensuring the success of low-code solutions within your organization. You have invested in the Power Platform with the expectation that it will drive business continuity, enhance solution performance, and mitigate security risks. Your oversight is crucial in aligning these solutions with the broader business objectives and ensuring that they deliver the expected value.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;h3 id="business-continuity">Business Continuity&lt;/h3>
&lt;p>One of your primary concerns is business continuity. You need to ensure that the solutions developed on the Power Platform are reliable and can withstand various operational challenges. Automated testing plays a critical role in this aspect by providing a safety net that ensures new features do not disrupt existing functionality. This continuous validation helps maintain the stability and reliability of the solutions, thereby supporting uninterrupted business operations.&lt;/p></description></item><item><title>Business Unit Leads</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/business-unit-leads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/business-unit-leads/</guid><description>&lt;p>As a Business Unit Lead, your role is critical in bridging the gap between business stakeholders and the teams responsible for developing and deploying low-code solutions. You are tasked with achieving the goals set by business stakeholders while demonstrating the impact and quality of the solutions created. Your oversight ensures that the solutions align with the strategic objectives of the business unit and deliver measurable value.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;h3 id="achieving-business-goals">Achieving Business Goals&lt;/h3>
&lt;p>Your primary responsibility is to ensure that the solutions developed on the Power Platform meet the business goals set by stakeholders. This involves overseeing the development process, ensuring that the solutions are aligned with business objectives, and tracking their performance against key metrics. Automated testing plays a vital role in this process by ensuring that the solutions are reliable, performant, and meet the required standards.&lt;/p></description></item><item><title>CoE Kit - Build from Source Example</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-build-from-source-run-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-build-from-source-run-tests/</guid><description>&lt;p>The Power Platform Center of Excellence (CoE) starter kit is composed of various low-code solution elements within the Power Platform. Among these elements is a model-driven application designed to facilitate the setup and upgrade of the CoE Starter Kit. This sample includes Power Apps Test Engine tests, which can be utilized to automate and verify key aspects of the expected behavior of the Setup and Upgrade Wizard.&lt;/p>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>The sample &lt;a href="https://github.com/microsoft/PowerApps-TestEngine/blob/grant-archibald-md/integration-merge/samples/coe-kit-setup-wizard/RunTests.ps1">RunTests.ps1&lt;/a> serves as an example of a &amp;ldquo;build from source&amp;rdquo; using the open-source licensed version of the Test Engine. The source code version may include features not yet released as part of the pac test run command in the Power Platform Command Line Interface action.&lt;/p></description></item><item><title>CoE Kit Learning Path Example</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-learning-path-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-learning-path-example/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Center of Excellence (CoE) Kit has become a vital tool for a large number of users globally. As the user base continues to grow, the CoE Kit faces significant architectural changes. Ensuring the quality of releases amidst these changes is crucial. The existing application has been developed over four years, incorporating Power Apps, Power Automate, Dataverse, and Power BI as seen in our &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-automate-test-sample/">Executing CoE Starter Kit Test Automation&lt;/a> example&lt;/p></description></item><item><title>CoE Kit Setup and Install Wizard</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-setup-and-install-wizard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-setup-and-install-wizard/</guid><description>&lt;h2 id="use-case-example">Use Case Example&lt;/h2>
&lt;p>Once example we have been working on recently is Automated testing of the &lt;a href="https://learn.microsoft.com/power-platform/guidance/coe/setup-core-components">Setup and Wizard&lt;/a> as we considered Automated Test for this application we had to look the following.&lt;/p>
&lt;ol>
&lt;li>How do we collaborate with the Test Engine team to improve the Test Engine?&lt;/li>
&lt;li>How do we setup and install the solution?&lt;/li>
&lt;li>Could we automate the creation of the environment, install of dependencies, setup of connections?&lt;/li>
&lt;li>How we extend testing a Model Driven Application with custom pages?&lt;/li>
&lt;li>How do we handle the user consent dialog?&lt;/li>
&lt;li>How build tests to interact with a complicated multi stage setup process?&lt;/li>
&lt;li>How can we create integration tests calling Power Automate Cloud Flows?&lt;/li>
&lt;li>How can we validating the successful setup and state with Dataverse?&lt;/li>
&lt;li>How can we scale what we are learning to improve guidance?&lt;/li>
&lt;/ol>
&lt;h2 id="early-adopter-and-build-from-source">Early Adopter and Build from Source&lt;/h2>
&lt;p>We collaborated closely with the Test Engine team by contributing code to the repository to use a &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-build-from-source-run-tests/">build from source&lt;/a> strategy. This included adding new code for authentication, providers for the Model Driven app, and expanding Power Fx functions to make testing easier. By building the open source from code, we applied a build process to integrate tests as part of our deployment process. This ensured that our tests were consistently run and validated during each deployment.&lt;/p></description></item><item><title>CoE Starter Kit - Infrastructure As Code</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/</guid><description>&lt;p>The combination of Terraform and the CoE Starter Kit provides a powerful and flexible solution for managing and governing your Power Platform environments. By leveraging the power of infrastructure as code and the comprehensive tools provided by the CoE Starter Kit, you can ensure that your environments are always in a consistent and reliable state, enabling you to focus on delivering value to your users.&lt;/p>
&lt;p>&lt;img alt="Diagram that shows terraform and steps that will be automated as part of deployment" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/media/coe-kit-infrastructure-as-code.png">&lt;/p></description></item><item><title>CoE Starter Kit Power Automate Testing</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-powerautomate-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-powerautomate-testing/</guid><description>&lt;h2 id="important-note">Important Note&lt;/h2>
&lt;p>The Test Engine Power Automate features are currently in the planning and early collaboration and code contributions to Test Engine for the approach outlined below.&lt;/p>
&lt;p>This article aims to serve as a starting point for discussion on how this feature could meet the needs of users who are building and deploying Power Automate Cloud flows. It is important to note that this feature is still in the early stages of planning and experimentation. We invite the community to be part of the discussion and to stay aware as the scope and features develop.&lt;/p></description></item><item><title>CoE Starter Kit Test Automation ALM</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-test-automation-alm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-test-automation-alm/</guid><description>&lt;p>The goal of implementing the following stages is to maintain the quality and reduce the manual effort for new releases of the CoE Starter Kit. This article will discuss the key topics in a narrative conversation style.&lt;/p>
&lt;h2 id="coe-kit---power-platform-low-code-alm-release-and-continuous-deployment-process">CoE Kit - Power Platform Low Code ALM Release and Continuous Deployment Process&lt;/h2>
&lt;p>When it comes to automating the release and continuous deployment process for the CoE Starter Kit, there are several options to consider.&lt;/p></description></item><item><title>Common Topics</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/common-topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/common-topics/</guid><description>&lt;p>This page contains sets of related topics that enable you to quickly relate topics related to Automated Testing in the Power Platform. Whether you&amp;rsquo;re just getting started or looking to deepen your expertise, you&amp;rsquo;ll find valuable resources and links to help you succeed.&lt;/p>
&lt;h2 id="application-lifecycle-management">Application Lifecycle Management&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Example&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-extending-test-engine/">Extending the Test Engine to Support Testing of the CoE Starter Kit Setup and Upgrade Wizard&lt;/a>&lt;/td>
 &lt;td>The CoE Starter Kit has extended the test engine to support testing of the Setup and Upgrade Wizard by breaking down tests into smaller steps, using variables and collections, and leveraging the Experimental namespace to overcome limitations. This approach ensures thorough and reliable testing, leading to a more robust and user-friendly application.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/">CoE Starter Kit - Infrastructure As Code&lt;/a>&lt;/td>
 &lt;td>The combination of Terraform and the CoE Starter Kit offers a robust solution for managing Power Platform environments by leveraging infrastructure as code to ensure consistency and reliability. This approach simplifies the setup and maintenance of environments, allowing us to create the foundations of an automated test matrix to test setup and upgrade process.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/ring-deployment-model/">Ring Deployment Model&lt;/a>&lt;/td>
 &lt;td>Discussion on how new features of Test Engine are deployed and made available as part of wider feature release Application Lifecycle Management model&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="business-context">Business Context&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Article&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;th>Feedback&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/strategic-importance-of-automated-testing-from-a-cxo-perspective/">The Strategic Importance of Automated Testing from a CXO Perspective&lt;/a>&lt;/td>
 &lt;td>Automated testing is not just a technical necessity but a strategic imperative for modern enterprises. From a CXO perspective, the implementation of automated testing frameworks can significantly enhance business outcomes, safeguard investments, and drive sustainable growth. Here’s a detailed look at why automated testing is crucial from a business standpoint, with a specific focus on the Power Apps Test Engine and how it addresses common challenges.&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/">Building a Sustainability Model&lt;/a>&lt;/td>
 &lt;td>In the fast-paced world of software development, the initial rush of quickly building and deploying a solution can be exhilarating. However, the true challenge lies in keeping your great idea alive and ensuring its sustainability over time. This discussion explores how to build a sustainability model that not only keeps your solution relevant but also engages the community and stakeholders in the process.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/5">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/">Embracing Testing Strategies for Low-Code Solutions: A Discussion for Enterprise Architects&lt;/a>&lt;/td>
 &lt;td>This discussion provides Enterprise Architects and related roles an overview of testing strategies for low-code solutions on the Power Platform, emphasizing the importance of automated testing, scalability, and integration with existing systems. It highlights key principles and practices to ensure that low-code applications are reliable, secure, and aligned with organizational goals.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/20">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/growing-to-enterprise-grade/">Growing to Enterprise Grade&lt;/a>&lt;/td>
 &lt;td>As solutions scale, the need for robust testing practices becomes more critical. This article explores how to transition from small-scale projects to enterprise-grade solutions, emphasizing the importance of automated testing in maintaining high standards of reliability, security, and performance.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/14">Discussion Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/impacts-on-people-process-and-tooling/">Impacts on People, Process, and Tooling&lt;/a>&lt;/td>
 &lt;td>Implementing automated testing requires a shift in mindset and practices. This article discusses the cultural and organizational changes needed to adopt automated testing, the impact on development and operations processes, and the tools that can facilitate this transformation.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/15">Discussion Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/low-code-test-design-principles/">Low code Testing Principles&lt;/a>&lt;/td>
 &lt;td>These principles provide a structured framework for creating robust tests that validate the functionality and performance of low-code applications.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/19">Discussion Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/why-automated-testing/">Why Automated Testing&lt;/a>&lt;/td>
 &lt;td>Automated testing is essential for ensuring the reliability, security, and performance of applications. It provides a safety net that catches bugs early, reduces manual testing efforts, and ensures consistent quality. This is particularly important in the context of low-code Power Platform solutions, where rapid development cycles can lead to overlooked issues.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/12">Discussion Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="generative-ai">Generative AI&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Article&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;th>Feedback&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/generative-ai/">Exploring Generative AI with Power Apps Test Engine&lt;/a>&lt;/td>
 &lt;td>As part of our proposed session, we could dive into the transformative capabilities of Generative AI within the Power Apps Test Engine. This discussion could highlight key scenarios: using Generative AI to convert natural language into defined test steps and leveraging AI Builder prompts to create and measure the potential business value of low-code solutions against Objectives and Key Results&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/transformative-power-of-ai/">Transformative Power of AI&lt;/a>&lt;/td>
 &lt;td>This article explores how AI can observe interactions and inform the agent to suggest happy paths, edge cases, and exception cases. This capability helps deliver a faster path to generate comprehensive test scenarios, enhancing the overall testing process.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/16">Discussion Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Article&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;th>Feedback&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/">Embracing Testing Strategies for Low-Code Solutions: A Discussion for Enterprise Architects&lt;/a>&lt;/td>
 &lt;td>This discussion provides Enterprise Architects and related roles an overview of testing strategies for low-code solutions on the Power Platform, emphasizing the importance of automated testing, scalability, and integration with existing systems. It highlights key principles and practices to ensure that low-code applications are reliable, secure, and aligned with organizational goals.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/20">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/">Implementing Effective Automated Testing Strategies in Power Platform Solutions&lt;/a>&lt;/td>
 &lt;td>Automated testing is a crucial aspect of modern software development, ensuring the reliability and efficiency of solutions. This discussion explores how to implement effective automated testing strategies in Power Platform solutions, using the CoE Starter Kit Setup and Upgrade wizard as an example. We will discuss the layers of automated testing across Power Apps, Power Automate, and Dataverse.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/6">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/">Introduction to Testing Approaches&lt;/a>&lt;/td>
 &lt;td>Read discussion and give your feedback on the concepts of automated testing looking at concepts like black box and white box testing for Power Apps, including Canvas Apps, Custom Pages, and Model Driven Applications. We&amp;rsquo;ll explore the importance of state management, connectors, workflows, and Dataverse state, and how to effectively test these components.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/4">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/data-simulation/">Data Simulation&lt;/a>&lt;/td>
 &lt;td>This discussion aims to explore the concepts of data simulation and mocking in the context of low code solutions, particularly focusing on Power Fx commands for Dataverse calls, connectors, and workflows.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/9">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/test-authoring/">Test Authoring&lt;/a>&lt;/td>
 &lt;td>In this discussion, we will explore the overview of authoring test cases using the Test Engine. We will delve into various aspects such as the CoE Kit Test Case Authoring, discoverability of visual elements, Test Studio, and the settings and configurations of the Test Engine. Additionally, we will discuss the role of Generative AI in enhancing the test authoring process.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/11">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Example&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/custom-page-variables-and-collections/">Testing Variables and Collections in Power Apps with the Test Engine&lt;/a>&lt;/td>
 &lt;td>The Test Engine in Power Apps offers robust capabilities for testing variables and collections, simplifying application state management. By leveraging the Set() function, developers can directly change the state of the application, making it easier to verify functionality and handle various scenarios.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-powerautomate-testing/">CoE Starter Kit Power Automate Testing&lt;/a>&lt;/td>
 &lt;td>The CoE Starter Kit Power Automate Testing feature is in the early stages of planning and aims to address the needs of users building and deploying Power Automate Cloud flows. Proper testing of these flows is crucial for maintaining accurate data collection and reporting, which supports better decision-making and governance within the organization&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="technical">Technical&lt;/h2>
&lt;h3 id="context">Context&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Context&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/test-engine-extensibility/">Test Engine Extensibility&lt;/a>&lt;/td>
 &lt;td>Discussion on Managed Extensibility Framework (MEF) providers for Test Engine&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/test-engine-providers/">Test Engine Providers&lt;/a>&lt;/td>
 &lt;td>Discussion on providers available for Test Engine to interact with different Power Platform resources&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/debugging-test-engine-test/">Debugging Test Engine Tests&lt;/a>&lt;/td>
 &lt;td>Follow this guide on how to effectively debug your tests using a local build from source strategy&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/keeping-up-to-date/">Keeping up to date&lt;/a>&lt;/td>
 &lt;td>Staying current with the latest features and updates in the Power Apps Test Engine allows you to leverage new capabilities and ensuring optimal performance. Here&amp;rsquo;s how you can keep up to date based on the version of test engine you are using.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/deep-dive-testengine-layers/">Deep Dive: Test Engine Layers&lt;/a>&lt;/td>
 &lt;td>This article is designed to walk through the different layers of how test engine tests are implemented and understand the key interactions between the layers&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/testing-localized-power-app/">Testing Localized Power Apps&lt;/a>&lt;/td>
 &lt;td>This article discusses the testing of localized Power Apps&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="discussion-articles">Discussion Articles&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Article&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;th>Feedback&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/">Low Code Power Platform Testing for the Code First Developer&lt;/a>&lt;/td>
 &lt;td>This article is intended as a starter for discussion and contains content that is under development. It is based on experiences from teams like the Power CAT Engineering team as they apply low code testing principles to the low code Power Platform solutions they build and maintain. Ideally, this discussion serves as a great starting point to foster collaboration and gain input to help shape low code automation and engineering excellence in the wider low code Power Platform community.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/2">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/playwright-vs-test-engine/">Playwright vs Power Apps Test Engine&lt;/a>&lt;/td>
 &lt;td>When it comes to testing low-code Power Platform applications, a common question arises: why not just use Playwright to directly test a Power App rather than using the Power Apps Test Engine? This discussion aims to explore the strengths and limitations of both tools and provide insights into their best use cases.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/1">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/authentication/">Authentication in Power Apps Test Engine&lt;/a>&lt;/td>
 &lt;td>Authentication is a critical component of the test automation process. The sample script employs browser-based authentication, which offers a range of options to authenticate with Microsoft Entra. This method generates a persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/td>
 &lt;td>&lt;a href="https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/8">Link&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Example&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/extending-testengine-powerfx-with-with-csharp-test-scripts/">Extending TestEngine Power FX with C# Test Scripts&lt;/a>&lt;/td>
 &lt;td>The extensibility of TestEngine Power FX using C# test scripts allows developers to integrate web-based Playwright commands through code-first extensibility, enhancing browser automation capabilities. This approach enables the creation of custom test scripts that leverage Playwright&amp;rsquo;s powerful features, improving productivity and maintainability by focusing on high-level test logic while handling common code efficiently&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/understanding-no-cliffs-extensibility-model/">Understanding the &amp;ldquo;No Cliffs&amp;rdquo; Extensibility Model of Power Apps Test Engine&lt;/a>&lt;/td>
 &lt;td>The &amp;ldquo;no cliffs&amp;rdquo; extensibility model of Power Apps Test Engine ensures that users can extend its capabilities without encountering barriers, providing a seamless experience for both makers and developers. By leveraging Power FX and C# test scripts, this model simplifies handling complex scenarios like Power Apps consent dialogs to enhancing the efficiency and reliability of the testing process&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/using-powerfx-namespaces-in-testing/">Using Power Fx Namespaces in Testing&lt;/a>&lt;/td>
 &lt;td>Power Fx namespaces allow developers to organize and separate different sets of functions within the language, helping to maintain clarity and avoid conflicts. By distinguishing between common features and specific actions, and separating stable features from experimental ones, namespaces ensure the stability and reliability of Power Apps.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="security">Security&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Context&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/security-first-initiative/">Secure First Initiative&lt;/a>&lt;/td>
 &lt;td>By integrating these principles, we aim to create robust, resilient, and secure applications that can withstand evolving cyber threats.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Discussion&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/authentication/">Authentication in Power Apps Test Engine&lt;/a>&lt;/td>
 &lt;td>Authentication is a critical component of the test automation process. The sample script employs browser-based authentication, which offers a range of options to authenticate with Microsoft Entra. This method generates a persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Example&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/testing-security/">Testing Security&lt;/a>&lt;/td>
 &lt;td>This article provides an example of how we can test browser-based authentication using multiple personas using Multi-Factor Authentication (MFA) with persistent cookie state and Power Apps security for Power Apps.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Data Simulation</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/data-simulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/data-simulation/</guid><description>&lt;h2 id="join-the-discussion">Join the Discussion&lt;/h2>
&lt;p>We invite you to join the conversation and share your thoughts on the following questions. Read on to learn more and voice your opinion!&lt;/p>
&lt;ul>
&lt;li>How do you think data simulation enhances the testing process for low code solutions?&lt;/li>
&lt;li>In what ways do you believe data simulation differs from the traditional concept of mocking?&lt;/li>
&lt;li>What are the key advantages and disadvantages of using mocks in testing, in your experience?&lt;/li>
&lt;li>How can Power Fx commands be utilized to effectively simulate and simplify Dataverse calls and workflows?&lt;/li>
&lt;li>What benefits do you see in using simulations when testing edge cases and exceptions?&lt;/li>
&lt;li>What role do you think Generative AI can play in identifying and generating comprehensive test cases?&lt;/li>
&lt;li>How can the concepts of data simulation and mocking be applied to unit testing of across the platform. For example across both Power Apps and Power Automate Cloud flows?&lt;/li>
&lt;/ul>
&lt;p>We look forward to hearing your insights and engaging in a lively discussion on these topics!&lt;/p></description></item><item><title>Debugging Test Engine Tests</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/debugging-test-engine-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/debugging-test-engine-test/</guid><description>&lt;p>For code-first developers eager to dive deep into the mechanics of the Test Engine, understanding how to debug authentication modules, providers, or Power Fx modules is crucial. Follow this guide on how to effectively debug your tests using a local build from source strategy.&lt;/p>
&lt;h2 id="setting-up-your-environment">Setting Up Your Environment&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Open the Project: Begin by opening the PowerApps-TestEngine folder in Visual Studio Code. This is your main workspace where you have cloned the repository to.&lt;/p></description></item><item><title>DevOps Engineers / Architects</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/devops-engineers-architects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/devops-engineers-architects/</guid><description>&lt;p>Welcome to the section dedicated to DevOps Engineers and Architects! Here, we&amp;rsquo;ll dive into the roles and responsibilities of these key players in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s explore their interests, oversight, and the crucial need for automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As a DevOps Engineer or Architect, your primary focus is on the overall Continuous Integration / Deployment (CI/CD) process. You play a pivotal role in integrating the Power Platform into this process, ensuring that everything runs smoothly from development to deployment. Your responsibilities include:&lt;/p></description></item><item><title>Does Every Solution Need Automated Testing?</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/does-every-solution-need-automated-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/does-every-solution-need-automated-testing/</guid><description>&lt;p>In the ever-evolving landscape of software development, the question of whether every solution requires automated testing is a topic of considerable debate. Automated testing, with its promise of efficiency and reliability, has become a cornerstone of modern development practices. However, the necessity and extent of its application can vary significantly depending on the context and nature of the project.&lt;/p>
&lt;h2 id="decisions-and-tradeoffs">Decisions and Tradeoffs&lt;/h2>
&lt;p>Given this context, making decisions can sometimes be challenging. To help with this, we have created the following decision tree. Read on to understand some of these choices and trade-offs.&lt;/p></description></item><item><title>Embracing Testing Strategies for Low-Code Solutions</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/</guid><description>&lt;p>In today&amp;rsquo;s fast-paced digital landscape, the Power Platform has become a cornerstone for many organizations, enabling rapid development and deployment of applications.&lt;/p>
&lt;p>As an Enterprise Architect or someone who works with your Enterprise Architecture team, your role is crucial in ensuring that these solutions are not only agile but also scalable, secure, and reliable. This guide aims to provide a high-level overview of various aspects of testing in the context of low-code solutions, addressing key topics that matter to IT leadership and business leaders who have invested in the Power Platform.&lt;/p></description></item><item><title>Enterprise Architects</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/enterprise-architects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/enterprise-architects/</guid><description>&lt;p>As an Enterprise Architect, your role is pivotal in ensuring that the technological landscape of your organization is robust, scalable, and aligned with strategic objectives. You are responsible for reviewing and setting implementation plans for content like the pillars of the &lt;a href="https://aka.ms/powa">Power Well-Architected Framework&lt;/a>, integrating low-code solutions with existing IT investments, and ensuring holistic integration across both low-code and code-first environments. Your oversight ensures that the organization&amp;rsquo;s technology infrastructure supports business goals and drives innovation.&lt;/p></description></item><item><title>Executing CoE Starter Kit Test Automation</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-automate-test-sample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-automate-test-sample/</guid><description>&lt;h2 id="wider-context">Wider Context&lt;/h2>
&lt;p>We are starting our testing with the Setup and Upgrade Wizard however the CoE Starter Kit has a much wider set of components that need to be tested. We are continually reviewing our automated test approach to consider the wider scope of the CoE Starter Kit.&lt;/p>
&lt;p>&lt;img alt="Diagram showing the different layers of CoE Starter Kit Test across - Authentication, Power Apps, Power Automate, AI Builder, Dataverse, Power Platform and Microsoft Fabric" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/media/coe-kit-testing-layers.png">&lt;/p></description></item><item><title>Exploring Generative AI with Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/generative-ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/generative-ai/</guid><description>&lt;p>In our upcoming session, we will dive into the transformative capabilities of Generative AI within the Power Apps Test Engine.&lt;/p>
&lt;p>This discussion will highlight two key scenarios: using Generative AI to convert natural language into defined test steps and leveraging AI Builder prompts to create and measure the potential business value of low-code solutions against Objectives and Key Results (OKRs).&lt;/p>
&lt;p>Looking at the wider Generative AI landscape we also have the Co Pilot Studio Testing capabilities can further enhance test automation by integrating with the Power Apps Test Engine. This integration allows for more comprehensive and efficient testing processes, ensuring that all aspects of the application are thoroughly tested.&lt;/p></description></item><item><title>Extending TestEngine Power FX with C# Test Scripts</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/extending-testengine-powerfx-with-with-csharp-test-scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/extending-testengine-powerfx-with-with-csharp-test-scripts/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this example, we explore the extensibility of TestEngine Power FX using C# test scripts. We will delve into the extensibility model of TestEngine, focusing on the integration of web-based Playwright commands through code-first extensibility.&lt;/p>
&lt;p>We will discuss extending the code-first extensibility of web-based Playwright commands. This approach enables developers to write custom test scripts that leverage the powerful capabilities of Playwright for browser automation.&lt;/p>
&lt;p>Providers in TestEngine understand the underlying model of the component being tested. They create Power FX abstractions that hide complexity, allowing testers to focus on the high-level logic of their tests. To allow code first extension the &lt;code>Experimental.PlaywrightScript()&lt;/code> Power FX function allows scripts to be recorded or authored in C# to extend the test.&lt;/p></description></item><item><title>Extending the Test Engine to Support Testing of the CoE Starter Kit Setup and Upgrade Wizard</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-extending-test-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/coe-kit-extending-test-engine/</guid><description>&lt;p>In this article, we will discuss how the CoE Starter Kit has made use of extensions to the test engine to support testing of Setup and Upgrade Wizard. This journey involves breaking down tests into smaller, more manageable steps, demonstrating the use of variables and collections, utilizing the Experimental namespace to overcome current limitations.&lt;/p>
&lt;p>By following these guidelines and examples, you can effectively make use of the test engine to learn how to to apply similar approaches. This ensures thorough and reliable testing, ultimately leading to a more robust and user-friendly application.&lt;/p></description></item><item><title>Get Started Assessment</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-assessment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-assessment/</guid><description>&lt;p>Welcome to site focused on low code testing of Power Platform using Test Engine. Use the assessment below to help you find the best place to start.&lt;/p>
&lt;div id="surveyContainer">&lt;/div>
&lt;link href="https://unpkg.com/survey-core/defaultV2.min.css" type="text/css" rel="stylesheet">
&lt;script type="text/javascript" src="https://unpkg.com/survey-core/survey.core.min.js">&lt;/script>
&lt;script type="text/javascript" src="https://unpkg.com/survey-js-ui/survey-js-ui.min.js">&lt;/script>
&lt;script type="text/javascript" src="https://unpkg.com/survey-core/themes/default-light-panelless.min.js">&lt;/script>
&lt;style>
.sd-progress-buttons__button span {
 color: #ffffff !important; /* Ensure the color is always white */
}
:root {
 --sjs-primary-backcolor: #1e3a5f; /* Dark blue background */
 --sjs-primary-backcolor-dark: #162d47; /* Even darker blue background */
 --sjs-primary-backcolor-light: #1e3a5f; /* Dark blue background */
 --sjs-primary-forecolor: #0d1b2a; /* Charcoal text color */
 --sjs-primary-forecolor-light: #0d1b2a; /* Charcoal text color */
 --sjs-primary-forecolor-dark: #000000; /* Black text color */
 --sjs-border-color: #1e3a5f; /* Dark blue border color */
 --sjs-border-color-light: #162d47; /* Even darker blue border color */
 --sjs-border-color-dark: #0d1b2a; /* Charcoal border color */
 --sjs-page-title-backcolor: #ffffff; /* Light background for page title */
 --sjs-page-title-forecolor: #1e3a5f; /* Dark blue text color for page title */
 --sjs-page-number-circle-backcolor: #1e3a5f; /* Dark blue background for page number circle */
 --sjs-page-number-text-color: #ffffff; /* White text color for page number */
&lt;p>}
&lt;/style>&lt;/p></description></item><item><title>Get Started Now</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/get-started-now/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/get-started-now/</guid><description>&lt;p>Welcome, early adopters! If you&amp;rsquo;re eager to try the current version of Power Platform Automated Testing, you&amp;rsquo;re in the right place. This guide will help you get started with the necessary components and provide you with two paths to explore automated testing.&lt;/p>
&lt;blockquote>
&lt;p>There is also a work in progress &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/learning/">Learning module&lt;/a> to help you get started.&lt;/p>
&lt;/blockquote>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>To get started, you&amp;rsquo;ll need the following components:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Ability to Clone Repository&lt;/strong>: Use Git command line or GitHub Desktop to clone the repository.&lt;/li>
&lt;li>&lt;strong>PowerShell&lt;/strong>: Ensure you have PowerShell installed on your machine.&lt;/li>
&lt;li>&lt;strong>Power Platform Command Line Tools&lt;/strong>: Install the Power Platform Command Line tools to interact with your Power Platform environment.&lt;/li>
&lt;li>&lt;strong>.NET 8.0 SDK&lt;/strong>: Download and install the .NET 8.0 SDK to build the code.&lt;/li>
&lt;li>&lt;strong>Azure CLI&lt;/strong>: Install the Azure CLI&lt;/li>
&lt;/ol>
&lt;p>This can seem daunting but the following steps will help you with this process assuming you are using Microsoft Windows as your local operating system.&lt;/p></description></item><item><title>Getting Started</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started/</guid><description>&lt;h2 id="welcome">Welcome&lt;/h2>
&lt;p>When it comes to Power Platform Automated Testing, where you start will depend on your &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/powerfuldev-testing/roles-and-responsibilities">role in the organization&lt;/a> and your willingness to work as an early adopter. This guide will help you navigate the key items to consider as you embark on this journey.&lt;/p>
&lt;p>{% include feature_row type=center %}&lt;/p>
&lt;p>Not sure where to start? Try our &lt;a href="./getting-started-assessment" class="btn btn--primary">Getting started assessment&lt;/a>&lt;/p>
&lt;h2 id="business">Business&lt;/h2>
&lt;p>Business users play a crucial role in the successful implementation of Power Platform Automated Testing. As early adopters, your involvement and feedback are essential to drive innovation and ensure the solutions meet your needs.&lt;/p></description></item><item><title>Getting Started Architects</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-architects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-architects/</guid><description>&lt;p>Architects play a pivotal role in the successful implementation of Power Platform Automated Testing. Your expertise and strategic oversight are essential to ensure that low-code solutions are robust, scalable, and aligned with organizational goals. By embracing automated testing, you can drive innovation and enhance the quality of your solutions.&lt;/p>
&lt;h3 id="why-should-architects-care">Why Should Architects Care?&lt;/h3>
&lt;p>Automated testing in the Power Platform allows you to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Ensure Quality&lt;/strong>: Implement rigorous testing standards to validate the functionality and performance of low-code solutions.&lt;/li>
&lt;li>&lt;strong>Enhance Integration&lt;/strong>: Seamlessly integrate low-code solutions with existing IT investments, ensuring a cohesive technology ecosystem.&lt;/li>
&lt;li>&lt;strong>Drive Innovation&lt;/strong>: Enable rapid iteration and improvement of solutions, staying ahead of the competition.&lt;/li>
&lt;li>&lt;strong>Maintain Compliance&lt;/strong>: Ensure that solutions comply with industry standards and organizational policies through consistent testing.&lt;/li>
&lt;/ul>
&lt;h3 id="call-to-action">Call to Action&lt;/h3>
&lt;p>Start planning for the impact of low-code automated testing today. Here are some steps you can take:&lt;/p></description></item><item><title>Getting Started Business Roles</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-business/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-business/</guid><description>&lt;p>Business users play a crucial role in the successful implementation of Power Platform Automated Testing. As early adopters, your involvement and feedback are essential to drive innovation and ensure the solutions meet your needs. By embracing low-code automated testing, you can significantly enhance the efficiency and reliability of your business processes.&lt;/p>
&lt;h3 id="why-should-business-users-care">Why Should Business Users Care?&lt;/h3>
&lt;p>Automated testing in the Power Platform allows you to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Improve Efficiency&lt;/strong>: Automate repetitive testing tasks, freeing up time for more strategic activities.&lt;/li>
&lt;li>&lt;strong>Enhance Quality&lt;/strong>: Ensure that your solutions are robust and perform as expected, reducing the risk of errors.&lt;/li>
&lt;li>&lt;strong>Drive Innovation&lt;/strong>: Quickly iterate and improve your solutions, staying ahead of the competition.&lt;/li>
&lt;li>&lt;strong>Ensure Compliance&lt;/strong>: Maintain compliance with industry standards and regulations through consistent and thorough testing.&lt;/li>
&lt;/ul>
&lt;h3 id="call-to-action">Call to Action&lt;/h3>
&lt;p>Start planning for the impact of low-code automated testing today. Here are some steps you can take:&lt;/p></description></item><item><title>Getting Started Technical Users</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-technical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/getting-started-technical/</guid><description>&lt;p>Technical users are at the forefront of implementing and optimizing Power Platform Automated Testing. Your technical expertise and willingness to adopt new technologies are crucial for driving innovation and ensuring the success of low-code solutions. By embracing automated testing, you can enhance the quality and efficiency of your development processes.&lt;/p>
&lt;h3 id="why-should-technical-users-care">Why Should Technical Users Care?&lt;/h3>
&lt;p>Automated testing in the Power Platform allows you to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Improve Productivity&lt;/strong>: Automate repetitive testing tasks, freeing up time for more complex development work.&lt;/li>
&lt;li>&lt;strong>Ensure Quality&lt;/strong>: Implement rigorous testing standards to validate the functionality and performance of low-code solutions.&lt;/li>
&lt;li>&lt;strong>Stay Ahead&lt;/strong>: Adopt the latest features and tools to continuously improve your solutions.&lt;/li>
&lt;li>&lt;strong>Enhance Collaboration&lt;/strong>: Work seamlessly with other teams to ensure a cohesive development process.&lt;/li>
&lt;/ul>
&lt;h3 id="call-to-action">Call to Action&lt;/h3>
&lt;p>&lt;img alt="Technical Getting Started" src="https://microsoft.github.io/PowerApps-TestEngine/powerfuldev-testing/assets/images/technical-get-started.png">&lt;/p></description></item><item><title>Growing to Enterprise Grade</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/growing-to-enterprise-grade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/growing-to-enterprise-grade/</guid><description>&lt;p>As your solutions scale, the need for robust testing practices becomes more critical. Growing to enterprise-grade involves adopting a model that can deploy on demand and rapidly respond to new features, errors, or security requirements. This model relies on the confidence provided by automated tests, allowing you to meet business needs while adhering to continuous integration and deployment (CI/CD) processes.&lt;/p>
&lt;h2 id="the-enterprise-grade-model">The Enterprise-Grade Model&lt;/h2>
&lt;p>An enterprise-grade model is designed to handle the complexities and demands of large-scale applications. It ensures that your solutions are &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/">sustainable&lt;/a>, reliable, secure, and performant, even as they grow in size and complexity. Key components of this model include:&lt;/p></description></item><item><title>Impacts on People, Process, and Tooling</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/impacts-on-people-process-and-tooling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/impacts-on-people-process-and-tooling/</guid><description>&lt;p>In the evolving landscape of software development, the integration of low-code solutions with existing automated testing and continuous integration (CI) practices is crucial. This approach, known as the &amp;ldquo;no cliffs&amp;rdquo; extensibility model, ensures that investments in automated testing and CI can be seamlessly integrated into low-code environments. This model supports both low-code-only and code-first deployment models, offering the best of both worlds.&lt;/p>
&lt;h2 id="no-cliffs-extensibility-model">No Cliffs Extensibility Model&lt;/h2>
&lt;p>The no cliffs extensibility model is designed to bridge the gap between low-code and traditional code-first development. It allows organizations to leverage their existing investments in automated testing and CI while embracing the agility and speed of low-code development. This model ensures that there are no abrupt transitions or &amp;ldquo;cliffs&amp;rdquo; when moving between low-code and code-first approaches.&lt;/p></description></item><item><title>Implementing Effective Automated Testing Strategies in Power Platform Solutions</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Automated testing is a crucial aspect of modern software development, ensuring the reliability and efficiency of solutions. This article explores how to implement effective automated testing strategies in Power Platform solutions, using the CoE Starter Kit Setup and Upgrade wizard as an example. We will discuss the layers of automated testing across Power Apps, Power Automate, and Dataverse.&lt;/p>
&lt;h2 id="getting-started-with-automated-testing">Getting Started with Automated Testing&lt;/h2>
&lt;p>Automated testing can seem daunting at first, but with the right approach, it can be seamlessly integrated into your development process. Here are some steps to get started:&lt;/p></description></item><item><title>Interactive Learning</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/interactive-learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/interactive-learning/</guid><description>&lt;h2 id="the-goal-of-interactive-documentation">The Goal of Interactive Documentation&lt;/h2>
&lt;p>The primary goal of interactive documentation is to create a living, breathing resource that evolves with the project and adapts to the needs of its users. Unlike static documentation, which can quickly become outdated and cumbersome, interactive documentation is designed to be:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Engaging&lt;/strong>: Incorporates multimedia elements and interactive examples to enhance understanding.&lt;/li>
&lt;li>&lt;strong>User-Centric&lt;/strong>: Tailored to meet the specific needs of different personas, ensuring that everyone from business stakeholders to technical experts can find the information they need.&lt;/li>
&lt;/ul>
&lt;h2 id="interactive-assessments">Interactive Assessments&lt;/h2>
&lt;p>To further enhance the value of interactive documentation, incorporating interactive assessments can be highly beneficial. These assessments can include conditional questions that adapt based on user responses, providing a personalized evaluation experience.&lt;/p></description></item><item><title>Introduction to Testing Approaches</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/</guid><description>&lt;p>When it comes to automated testing of software applications, there are two primary approaches: black box testing and white box testing. These terms might sound technical, but they are quite straightforward once you understand the basics. Let&amp;rsquo;s explore these concepts and see how they apply to Power Apps and look at how to approach and augment these testing approaches.&lt;/p>
&lt;h2 id="the-role-of-manual-testing">The Role of Manual Testing&lt;/h2>
&lt;p>Before we start into the Automated testing which this discussion primarily focuses on, it&amp;rsquo;s important to recognize the significant role that manual testing plays in the overall testing strategy. Automated tests are powerful tools for ensuring consistency and efficiency, but they should not be the sole method of testing.&lt;/p></description></item><item><title>Keeping up to date</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/keeping-up-to-date/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/keeping-up-to-date/</guid><description>&lt;p>Staying current with the latest features and updates in the Power Apps Test Engine allows you to leverage new capabilities and ensuring optimal performance. Here&amp;rsquo;s how you can keep up to date based on the version of test engine you are using.&lt;/p>
&lt;h2 id="key-concept-ring-deployment-model">Key Concept: Ring Deployment Model&lt;/h2>
&lt;p>The &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/ring-deployment-model/">Ring Deployment Model&lt;/a> is a phased approach to rolling out new features and updates.&lt;/p>
&lt;h3 id="keeping-up-to-date">Keeping Up to Date&lt;/h3>
&lt;h4 id="inner-ring-canary-users">Inner Ring (Canary Users)&lt;/h4>
&lt;p>As an Inner Ring user, you are among the first to test new features. Keeping up to date involves using source control to fetch the latest changes. Here’s how you can do it:&lt;/p></description></item><item><title>Layers of the Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/deep-dive-testengine-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/deep-dive-testengine-layers/</guid><description>&lt;p>This article is designed to walk through the different layers of how test engine tests are implemented and understand the key interactions between the layers.&lt;/p>
&lt;p>&lt;img alt="Overview diagram of layers of test engine across recording, test case definition, test steps" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/media/test-engine-layers.png">&lt;/p>
&lt;p>Let have a look at the key layers that make up the Test Engine testing process.&lt;/p>
&lt;blockquote>
&lt;p>Note: This deep dive does not include the common login process which is covered in more depth in &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/security-testengine-storage-state-deep-dive/">Deep Dive - Test Engine Storage State Security&lt;/a>&lt;/p></description></item><item><title>Learning Playground</title><link>https://microsoft.github.io/PowerApps-TestEngine/learning/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/learning/playground/</guid><description>&lt;p>Welcome to the learning playground a space to try interactive concepts related to Power Fx and testing. You can use the steps of each playground task to explore different key concepts.&lt;/p>
&lt;blockquote>
&lt;p>Once have completed each set of learning playground concepts have a look at related learning playground tasks to build your knowledge.&lt;/p>
&lt;/blockquote>
&lt;style>
 .monaco-editor {
 border: 1px solid #eee;
 height: auto;
 }
 .page { 
 float: none !important;
 width: 100%;
 }
 .results-section {
 margin-top: 20px;
 padding: 10px;
 border: 2px solid #000;
 background-color: #f9f9f9;
 }
 .actions > select { display: inline; }
&lt;/style>
&lt;div id="powerfx-1200-title">&lt;/div>
&lt;div id="powerfx-1200-description">&lt;/div>
&lt;div id="powerfx-1200-editor" style="width: 100%; height: 200px">&lt;/div>
&lt;div class="actions">
 &lt;button id="powerfx-1200-runButton" disabled>Try It!&lt;/button>
 &lt;button id="powerfx-1200-resetButton">Reset&lt;/button>
 &lt;select id="powerfx-1200-relatedTasksDropdown">
 &lt;option value="">Select a related task&lt;/option>
 &lt;/select>
 &lt;button id="powerfx-1200-openRelatedButton" disabled>Open Related Task&lt;/button>
&lt;/div>
&lt;h3>Results&lt;/h3>
&lt;div class="results-section">
 &lt;div id="powerfx-1200-output">&lt;/div>
&lt;/div>
&lt;h3>Playground Steps&lt;/h3>
&lt;p>You can try the following to experiment with this playground task:&lt;/p></description></item><item><title>Low Code Power Platform Testing for the Code First Developer</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/</guid><description>&lt;h2 id="notice">Notice&lt;/h2>
&lt;p>This article is intended as a starter for discussion and contains content that is under development. It is based on experiences from teams like the Power CAT Engineering team as they apply low code testing principles to the low code Power Platform solutions they build and maintain. Ideally, this discussion serves as a great starting point to foster collaboration and gain input to help shape low code automation and engineering excellence in the wider low code Power Platform community.&lt;/p></description></item><item><title>Low-Code Testing Principles for Power Platform</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/low-code-test-design-principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/low-code-test-design-principles/</guid><description>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>As we move towards &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/growing-to-enterprise-grade/">enterprise-grade&lt;/a> solutions created using the Power Platform, it&amp;rsquo;s essential to ensure the reliability and functionality of these applications. This article explores guiding principles for low-code testing, focusing on techniques such as record and replay, isolation, human-in-the-loop, &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/transformative-power-of-ai/">generative AI&lt;/a> for test suggestions, state changes observation, single responsibility tests, assertion for verification, abstract complexity, trust, and simplicity. Let&amp;rsquo;s quickly summarize the principles and then define what each principle is with examples.&lt;/p></description></item><item><title>Maintainability of Low Code Solutions Using Automation</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/maintainability-of-low-code-solutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/maintainability-of-low-code-solutions/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In today&amp;rsquo;s fast-paced digital landscape, maintaining low code solutions efficiently is crucial for ensuring seamless operations and continuous innovation. Automation plays a pivotal role in enhancing the maintainability and &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/">sustainability&lt;/a> of these solutions by streamlining processes, reducing manual efforts, and ensuring consistency across various environments.&lt;/p>
&lt;h2 id="the-role-of-infrastructure-as-code">The Role of Infrastructure as Code&lt;/h2>
&lt;h3 id="automated-provisioning-of-test-environments">Automated Provisioning of Test Environments&lt;/h3>
&lt;p>&lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/">Infrastructure as Code (IaC)&lt;/a> is van be key enabler for automating the provisioning of test environments. By defining infrastructure configurations in code, teams can create consistent and repeatable environments with the necessary settings, dependencies, and solution installations. This automated process helps in establishing a robust test matrix that validates installations globally, allowing teams to proactively identify and address issues.&lt;/p></description></item><item><title>Makers</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/makers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/makers/</guid><description>&lt;p>As a Maker, you are at the forefront of innovation within your organization, using low-code tools on the Power Platform to rapidly develop solutions that address business needs. Your role is crucial in driving digital transformation and empowering business users to create impactful applications. However, to ensure the success and sustainability of these solutions, it is essential to incorporate automated testing practices into your development process.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;h3 id="rapid-development">Rapid Development&lt;/h3>
&lt;p>One of your primary responsibilities is to quickly develop and deploy solutions that meet business requirements. Low-code tools enable you to achieve this by providing a user-friendly interface and pre-built components that simplify the development process. However, rapid development should not come at the expense of quality. Automated testing helps ensure that the solutions you create are reliable and perform as expected, even as you iterate and add new features.&lt;/p></description></item><item><title>Managers</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/managers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/managers/</guid><description>&lt;p>As a Manager, your role is crucial in ensuring that your team of makers and software developers has the necessary knowledge and training to effectively build and test low-code solutions on the Power Platform. You are responsible for fostering a culture of continuous learning and improvement, ensuring that your team is equipped to meet the evolving demands of the business.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;h3 id="knowledge-and-training">Knowledge and Training&lt;/h3>
&lt;p>One of your primary responsibilities is to ensure that your team has the required knowledge and training to build and test low-code solutions effectively. This involves providing access to training resources, workshops, and hands-on learning opportunities. Automated testing is a critical component of this training, as it equips your team with the skills needed to create reliable and high-quality solutions.&lt;/p></description></item><item><title>Microsoft Engineering</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/microsoft-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/microsoft-engineering/</guid><description>&lt;p>Welcome to the section dedicated to Microsoft Engineering! Here, we&amp;rsquo;ll explore the roles and responsibilities of Microsoft Engineering teams in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into their interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As part of the Microsoft Engineering team, our primary focus is on building and maintaining the features of the Power Platform. We play a crucial role in ensuring that the platform is robust, scalable, and meets the needs of users. Our responsibilities include:&lt;/p></description></item><item><title>Microsoft Support</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/microsoft-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/microsoft-support/</guid><description>&lt;p>Here, we&amp;rsquo;ll explore Microsoft Support teams in relation to low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into our interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As part of the Microsoft Support team, our primary focus is on assisting customers with their Power Platform solutions. We play a crucial role in ensuring that these solutions are reliable, performant, and meet the needs of users. Our responsibilities include:&lt;/p></description></item><item><title>Playwright vs Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/playwright-vs-test-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/playwright-vs-test-engine/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When it comes to testing low-code Power Platform applications, a common question arises: why not just use Playwright to directly test a Power App rather than using the Power Apps Test Engine? This discussion aims to explore the strengths and limitations of both tools and provide insights into their best use cases.&lt;/p>
&lt;h2 id="playwright-a-tool-for-code-first-developers">Playwright: A Tool for Code-First Developers&lt;/h2>
&lt;h3 id="general-purpose-web-based-tests">General Purpose Web-Based Tests&lt;/h3>
&lt;p>&lt;a href="https://playwright.dev/">Playwright&lt;/a> is a fantastic tool for code-first developers who are creating general-purpose web-based tests. It offers a robust framework for automating browser interactions and is highly versatile for various web applications. However, when it comes to testing Power Platform applications, there are several considerations to keep in mind.&lt;/p></description></item><item><title>Power Customer Advisory Team (Power CAT)</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/powercat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/powercat/</guid><description>&lt;p>Welcome to the section dedicated to the &lt;a href="https://aka.ms/whoispowercat">Power Customer Advisory Team&lt;/a> (Power CAT)! We are part of the Microsoft Power Platform engineering team, and our mission is to ensure the success of our key enterprise customers with the Power Platform. Let&amp;rsquo;s dive into who we are, what we do, and how we interact with various roles to help people be successful, especially in the context of automated testing.&lt;/p>
&lt;h2 id="who-we-are">Who We Are&lt;/h2>
&lt;p>We are a diverse group of technical architects, community managers, program managers, developers, and content creators, located all over the world. Our shared passion for the possibilities of low-code drives us to work closely with a specific group of key enterprise customers, doing whatever it takes to ensure their success with the Power Platform.&lt;/p></description></item><item><title>Ring Deployment Model</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/ring-deployment-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/ring-deployment-model/</guid><description>&lt;p>In the ever-evolving landscape of software development, the Ring Deployment Model stands out as a strategic approach to rolling out new features and updates. This model, inspired by the concentric rings of a tree, ensures that changes are introduced in a controlled, phased manner, minimizing risks and maximizing feedback.&lt;/p>
&lt;p>Imagine a bustling city where a new public transportation system is about to be launched. Instead of opening all routes simultaneously, the city planners decide to test the system in a small neighborhood first. This pilot phase allows them to gather feedback, identify issues, and make necessary adjustments before expanding to larger areas. This is the essence of the Ring Deployment Model.&lt;/p></description></item><item><title>Roadmap Alignment</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/roadmap-alignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/roadmap-alignment/</guid><description>&lt;h2 id="managed-operations">Managed Operations&lt;/h2>
&lt;p>As outlined at Ignite by Nirav Shah the Corporate Vice President (CVP) for Dataverse in &lt;a href="https://www.microsoft.com/en-us/power-platform/blog/it-pro/introducing-managed-operations-for-microsoft-dynamics-365-and-power-platform/">Introducing managed operations for Microsoft Dynamics 365 and Power Platform&lt;/a> we introduced the concept of Managed Operations which aligns the work for this session with wider Managed features in the Power Platform.&lt;/p>
&lt;p>&lt;img alt="Overview diagram of Power Platform Managed Operations" src="https://www.microsoft.com/en-us/power-platform/blog/wp-content/uploads/2024/11/IntroManagedOps-2048x1164.jpg">&lt;/p>
&lt;h3 id="managed-operations-definition">Managed Operations Definition&lt;/h3>
&lt;p>Power Platform managed operations, a suite of capabilities to empower organizations of all sizes to build, deploy, and operate their most critical workloads. Built with both existing and emerging AI-driven solutions in mind, these capabilities ensure stability and minimize disruption while maximizing the productivity of operations teams.&lt;/p></description></item><item><title>Secure First Initiative</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/security-first-initiative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/security-first-initiative/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The &lt;a href="https://www.microsoft.com/trust-center/security/secure-future-initiative">Secure First Initiative (SFI)&lt;/a> is a comprehensive approach to ensuring that security is embedded in every aspect of our solutions. This initiative is built on three core principles: &lt;strong>Secure By Design&lt;/strong>, &lt;strong>Secure By Default&lt;/strong>, and &lt;strong>Secure in Operations&lt;/strong>. By integrating these principles, we aim to create robust, resilient, and secure applications that can withstand evolving cyber threats.&lt;/p>
&lt;h2 id="security-principles">Security Principles&lt;/h2>
&lt;p>In today&amp;rsquo;s digital landscape, security is paramount. The Secure First Initiative (SFI) emphasizes a proactive approach to security, ensuring that every layer of our solutions is fortified against potential threats. This involves a culture of continuous improvement, robust governance, and adherence to best practices across all stages of development and operations. Lets look at the key principles.&lt;/p></description></item><item><title>Security Architects</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/security-architects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/security-architects/</guid><description>&lt;p>Welcome to the section dedicated to Security Architects! Here, we&amp;rsquo;ll explore the roles and responsibilities of security architects in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into their interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As a Security Architect, your primary focus is on managing cybersecurity and data privacy, ensuring that low-code solutions do not expose the organization to risk. You play a crucial role in maintaining the security and compliance of these solutions. Your responsibilities include:&lt;/p></description></item><item><title>Software Engineers</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/software-engineers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/software-engineers/</guid><description>&lt;p>Welcome to the section dedicated to Software Engineers! Here, we&amp;rsquo;ll explore the roles and responsibilities of software engineers in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into their interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As a Software Engineer, your primary focus is on leveraging your code-first skills to enhance and extend the capabilities of the Power Platform. You play a crucial role in integrating traditional development practices with low-code solutions, ensuring that both approaches work seamlessly together. Your responsibilities include:&lt;/p></description></item><item><title>Solution Architects</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/solution-architects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/solution-architects/</guid><description>&lt;p>As a Solution Architect, your role is crucial in implementing enterprise standards and making recommendations on how to execute enterprise plans effectively. You are responsible for ensuring that low-code solutions on the Power Platform are built, implemented, reviewed, and deployed in alignment with organizational goals and best practices. Your oversight ensures that these solutions are robust, scalable, and integrated seamlessly into the broader IT ecosystem.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;h3 id="implementing-enterprise-standards">Implementing Enterprise Standards&lt;/h3>
&lt;p>One of your primary responsibilities is to implement enterprise standards that ensure the quality and consistency of low-code solutions. This involves defining best practices for development, testing, and deployment. Automated testing is a key component of these standards, providing a systematic approach to validating the functionality and performance of solutions. By incorporating automated tests, you can ensure that solutions meet the required standards and deliver consistent results.&lt;/p></description></item><item><title>Storage State Deep Dive</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/security-testengine-storage-state-deep-dive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/security-testengine-storage-state-deep-dive/</guid><description>&lt;p>One of the key elements of automated discussion using the multiple profiles of automated testing of Power apps is the security model to allow login and the security around these credentials. Understanding this deep dive is critical to comprehend how the login credential process works, how login tokens are encrypted, and how this relates to the Multi-Factor Authentication (MFA) process. Additionally, we will explore the controls that the Entra security team can put in in place and the security model across Test Engine, Playwright, Data Protection API, OAuth Login to Dataverse, Dataverse, and Key Value Store.&lt;/p></description></item><item><title>Support Engineers</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/support-engineers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/support-engineers/</guid><description>&lt;p>Welcome to the section dedicated to Support Engineers! Here, we&amp;rsquo;ll explore the roles and responsibilities of support engineers in the low-code testing landscape on the Power Platform. Let&amp;rsquo;s dive into their interests, oversight, and the importance of automated testing.&lt;/p>
&lt;h2 id="interests-and-oversight">Interests and Oversight&lt;/h2>
&lt;p>As a Support Engineer, your primary focus is on ensuring the quality and scalability of low-code solutions across the organization. You play a crucial role in maintaining and supporting these solutions, ensuring they meet the required standards and can be effectively scaled. Your responsibilities include:&lt;/p></description></item><item><title>Test Engine and Power Fx</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-engine-powerfx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-engine-powerfx/</guid><description>&lt;p>This discussion post looks at Test Engine from the lens of Power Fx. We will cover the following key topics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>What is Power Fx?&lt;/strong>: A low-code general-purpose programming language based on spreadsheet-like formulas, accessible to a wide range of users due to its roots in Excel.&lt;/li>
&lt;li>&lt;strong>Advanced Topics in Power Fx&lt;/strong>: Includes creating custom functions, integrating with external data sources, and optimizing performance for large-scale applications.&lt;/li>
&lt;li>&lt;strong>Extensibility Model&lt;/strong>: Leverages existing skills and libraries, encapsulates complexity, enhances collaboration, and facilitates integration with external systems.&lt;/li>
&lt;li>&lt;strong>Growing Language&lt;/strong>: Inspired by Excel&amp;rsquo;s Lambda functions, includes functions and modules for greater reuse and parameterization, enhancing flexibility and power.&lt;/li>
&lt;li>&lt;strong>Why Power Fx and Test Engine?&lt;/strong>: Provides a robust framework for testing and validating workflows and applications with declarative YAML definitions and new functions like Assert().
Power Platform Provider Model: Uses a common language for provider-specific functions like &lt;code>SimulateWorkflow()&lt;/code>, &lt;code>SimulateDataverse()&lt;/code>, and &lt;code>SimulateConnector()&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Power Fx as an Intermediate Language in Generative AI&lt;/strong>: Bridges the gap between natural language and specific instructions, essential for generative AI applications.&lt;/li>
&lt;li>&lt;strong>Namespace Actions and Experimental Validation&lt;/strong>: Allows creation and validation of experimental actions before production, ensuring reliability and robustness.&lt;/li>
&lt;li>&lt;strong>Transferability of Skills Across the Platform&lt;/strong>: Consistent language and testing approach across Power Apps, Power Pages, and Power Automate, simplifying the learning curve and enhancing collaboration.&lt;/li>
&lt;/ul>
&lt;h2 id="join-the-discussion">Join The Discussion&lt;/h2>
&lt;p>What aspects of Power Fx are you most curious about, and why?&lt;/p></description></item><item><title>Test Engine Extensibility</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/test-engine-extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/test-engine-extensibility/</guid><description>&lt;p>Let&amp;rsquo;s dive into the world of &lt;strong>Test Engine Extensibility&lt;/strong>. Whether you&amp;rsquo;re new to this concept or looking to deepen your understanding, this guide will walk you through the essentials and show you how to leverage the power of extensibility in your testing workflows.&lt;/p>
&lt;p>&lt;img alt="Overview diagram of test engine extensibility" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/context/media/test-engine-extensibility.png">&lt;/p>
&lt;h2 id="common-features-of-the-test-engine">Common Features of the Test Engine&lt;/h2>
&lt;p>First things first, let&amp;rsquo;s talk about what the test engine brings to the table:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Test Suite and Test Case Execution&lt;/strong>: At its core, the test engine allows you to define and execute test suites and test cases. This means you can organize your tests into logical groups and run them systematically to ensure your application behaves as expected.&lt;/p></description></item><item><title>Test Engine Providers</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/test-engine-providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/test-engine-providers/</guid><description>&lt;p>The evolution of the Test Engine within the Power Platform ecosystem has been remarkable. Initially, the Test Engine was limited to supporting only canvas applications. However, with the introduction of the new provider model, the capabilities have expanded significantly.&lt;/p>
&lt;h2 id="the-first-version-canvas-applications-only">The First Version: Canvas Applications Only&lt;/h2>
&lt;p>When the Test Engine was first introduced, it was designed to support canvas applications exclusively. Canvas applications are a type of app within the Power Platform that allows users to design and build apps by dragging and dropping elements onto a canvas, much like creating a slide in PowerPoint. This approach is highly intuitive and enables rapid development of custom applications.&lt;/p></description></item><item><title>Test Engine Security - Authentication Changes</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/security-testengine-authentication-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/security-testengine-authentication-changes/</guid><description>&lt;p>When the experimental release of the Test Engine was initially made available, the only authentication method provided was through environment variables for the username and password. This approach presented several issues. Firstly, it relied on Basic authentication, which is inherently less secure as it transmits credentials in an easily decodable format. Additionally, this method did not align with Microsoft&amp;rsquo;s strong recommendations for Multi-Factor Authentication (MFA), which is crucial for enhancing security by requiring multiple forms of verification.&lt;/p></description></item><item><title>Test Engine Test Authoring</title><link>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/discussion/test-authoring/</guid><description>&lt;p>To aid you in quickly getting started we have found a record and replay approach is an effective method to get started.&lt;/p>
&lt;p>Given this experience lets dive in and see some of the options we have explored as we are building low code tests for our solutions.&lt;/p>
&lt;p>&lt;img alt="Example test authoring process" src="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/media/test-authoring.png">&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this discussion post, we will explore the and overview of authoring test cases using the Test Engine using features that are currently in the development of open source version of Test Engine.&lt;/p></description></item><item><title>Testing Localized Power Apps</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/testing-localized-power-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/testing-localized-power-app/</guid><description>&lt;p>Localization is an important aspect of software development that ensures applications are accessible and user-friendly for people from different linguistic and cultural backgrounds. Despite its importance, localization is often seen as a challenging task and is sometimes deprioritized. This post explores the significance of localization, the common hurdles faced, and how to effectively test localized Power Apps.&lt;/p>
&lt;h2 id="the-importance-of-localization">The Importance of Localization&lt;/h2>
&lt;p>Localization goes beyond mere translation. It involves adapting the content, layout, and functionality of an application to meet the cultural and linguistic needs of users in different regions. Proper localization can significantly enhance user experience, increase market reach, and improve customer satisfaction.&lt;/p></description></item><item><title>Testing Security</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/testing-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/testing-security/</guid><description>&lt;p>This article provides an example of how we can test browser-based authentication using multiple personas using Multi-Factor Authentication (MFA) with persistent cookie state and Power Apps security for Power Apps.&lt;/p>
&lt;p>The authentication process allows for cookies that are used for authentication to be stored between test runs using &lt;code>storageState&lt;/code> which allows the browser state to be stored between tests.&lt;/p>
&lt;p>We use a Power Apps Test Engine &lt;a href="https://github.com/microsoft/PowerApps-TestEngine/tree/grant-archibald-ms/storage-state-389/samples/permissions">permissions sample&lt;/a> that demonstrates using two user personas, including a set of tests to log in to the Power Apps Portal, a canvas application, and a Model-Driven Application.&lt;/p></description></item><item><title>Testing Variables and Collections in Power Apps with the Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/custom-page-variables-and-collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/custom-page-variables-and-collections/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In Power Apps, the Test Engine provides a robust capability to test variables and collections on custom pages. This article explores the essentials of Power FX variables and collections, their common uses, and the role of testing in simplifying application state management.&lt;/p>
&lt;p>&lt;img alt="Power Apps Low Code testing - Variables and Collections example" src="./media/custom-page-variables-collections.png">&lt;/p>
&lt;h2 id="what-are-power-fx-variables-and-collections">What are Power FX Variables and Collections?&lt;/h2>
&lt;p>Power FX variables and collections are fundamental components in Power Apps that help manage the state and data within an application.&lt;/p></description></item><item><title>The Strategic Importance of Automated Testing from a CXO Perspective</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/strategic-importance-of-automated-testing-from-a-cxo-perspective/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/strategic-importance-of-automated-testing-from-a-cxo-perspective/</guid><description>&lt;p>Automated testing is not just a technical necessity but a strategic imperative for modern enterprises. From a CXO perspective, the implementation of automated testing frameworks can significantly enhance business outcomes, safeguard investments, and drive sustainable growth. Here’s a detailed look at why automated testing is crucial from a business standpoint, with a specific focus on the Power Apps Test Engine and how it addresses common challenges.&lt;/p>
&lt;h3 id="pros-and-cons-of-automated-testing">Pros and Cons of Automated Testing&lt;/h3>
&lt;p>Lets start off by looking at some possible advantages and disadvantages that Automated testing can provide:&lt;/p></description></item><item><title>Top-Down Adoption Strategy</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/top-down/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/top-down/</guid><description>&lt;p>Welcome to the section dedicated to the Top-Down Adoption Strategy! This approach is driven by leadership and management to ensure alignment with organizational goals. Let&amp;rsquo;s explore how this strategy works, its benefits, and how it can be effectively implemented in your organization, especially in the context of adopting automated testing.&lt;/p>
&lt;h2 id="what-is-top-down-adoption">What is Top-Down Adoption?&lt;/h2>
&lt;p>Top-Down Adoption is a strategy where the initiative to adopt new technologies, such as the Power Platform and automated testing, is driven by the organization&amp;rsquo;s leadership and management. This approach ensures that the adoption aligns with the overall strategic objectives and goals of the organization. Leadership sets the vision, provides the necessary resources, and drives the adoption process from the top levels of the organization down to individual contributors.&lt;/p></description></item><item><title>Trainers</title><link>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/trainers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/roles-and-responsibilities/trainers/</guid><description>&lt;p>As a Trainer, your role is essential in equipping your organization with the skills and knowledge needed to effectively utilize low-code tools on the Power Platform. You are responsible for developing and delivering training programs that empower makers, developers, and other stakeholders to build and test high-quality solutions. Your oversight ensures that the workforce is well-prepared to meet the evolving demands of the business and leverage the full potential of low-code development.&lt;/p></description></item><item><title>Transformative Power of AI</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/transformative-power-of-ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/transformative-power-of-ai/</guid><description>&lt;p>The transformative power of AI in the realm of automated testing with the Power Platform lies in its ability to observe by example as you interact with the created low-code solution. By augmenting this with your knowledge and expectations of how the solution should work, Generative AI can suggest comprehensive test suites and cases. These suggestions cover expected &amp;ldquo;happy path&amp;rdquo; tests, edge cases, and exception cases, bridging the gap in domain knowledge of testing practices that may be new to many developers.&lt;/p></description></item><item><title>Understanding Feature Branches</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/understanding-feature-branches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/understanding-feature-branches/</guid><description>&lt;h2 id="what-is-a-git-feature-branch">What is a Git Feature Branch?&lt;/h2>
&lt;p>Imagine you&amp;rsquo;re writing a book. You have your main storyline, but you also want to explore a few alternative plots without affecting the main story. In the world of software development, Git branches work similarly. A Git branch allows you to create a separate line of development, where you can make changes, experiment, and test new features without altering the main project.&lt;/p>
&lt;h2 id="why-use-branches">Why Use Branches?&lt;/h2>
&lt;p>Branches are incredibly useful for several reasons:&lt;/p></description></item><item><title>Understanding the "No Cliffs" Extensibility Model of Power Apps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/understanding-no-cliffs-extensibility-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/understanding-no-cliffs-extensibility-model/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The &amp;ldquo;no cliffs&amp;rdquo; extensibility model of Power Apps Test Engine is designed to provide a seamless experience for both makers and developers. This model ensures that users can extend the capabilities of the Power Apps Test Engine without hitting any barriers or &amp;ldquo;cliffs.&amp;rdquo; In this example, we will explore this model using the consent dialog of a Model Driven Application custom page as an example.&lt;/p>
&lt;h2 id="what-is-a-consent-dialog">What is a Consent Dialog?&lt;/h2>
&lt;p>A &lt;a href="https://learn.microsoft.com/power-apps/maker/canvas-apps/connections-list#connection-consent-dialog">consent dialog&lt;/a> is a prompt that appears to users, asking for their permission to access certain resources or perform specific actions. This dialog is crucial for maintaining security and ensuring that users are aware of and agree to the actions being taken on their behalf.&lt;/p></description></item><item><title>Using Power Fx Namespaces in Testing</title><link>https://microsoft.github.io/PowerApps-TestEngine/examples/using-powerfx-namespaces-in-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/examples/using-powerfx-namespaces-in-testing/</guid><description>&lt;p>&lt;strong>NOTE&lt;/strong> Namespaces are a preview feature only available in early release integration branches of the Power Apps test engine.&lt;/p>
&lt;h2 id="introduction-to-power-fx-namespaces">Introduction to Power Fx Namespaces&lt;/h2>
&lt;p>Power Fx namespaces are a powerful feature that allows developers to organize and separate different sets of functions within the Power Fx language. By using namespaces, you can distinguish between the default functions provided by Power Fx, such as &lt;code>CountRows()&lt;/code>, and extensions added for specific purposes, like the Test Engine with functions such as &lt;code>Experimental.Pause()&lt;/code>. This separation helps in maintaining clarity and avoiding conflicts between different sets of features.&lt;/p></description></item><item><title>Why Automated Testing?</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/why-automated-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/why-automated-testing/</guid><description>&lt;p>Automated testing is a cornerstone of modern software development, ensuring that applications are &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/">sustainable&lt;/a>, reliable, secure, and performance. In the context of low-code Power Platform solutions, automated testing becomes even more critical due to the rapid development cycles and the need for enterprise-grade reliability.&lt;/p>
&lt;h2 id="learned-expectations-of-automated-testing">Learned Expectations of Automated Testing&lt;/h2>
&lt;p>In traditional software development, automated testing has proven to be invaluable for catching bugs early, reducing manual testing efforts, and ensuring consistent quality. These benefits are equally applicable to low-code solutions, where the speed of development can sometimes lead to overlooked issues. Automated tests provide a safety net, ensuring that new features do not break existing functionality and that the application remains robust as it evolves.&lt;/p></description></item><item><title>Why Not Just Manual Testing</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/why-not-just-manual-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/why-not-just-manual-testing/</guid><description>&lt;p>Imagine an error occurs outside normal operating hours, and the person who created the application is on holiday. How can you effectively diagnose the problem, propose changes, and deploy with confidence that the solution will continue to work? This example demonstrates the limitations of relying solely on manual testing and developing a comprehensive &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/">testing strategy&lt;/a> as applications reach toward enterprise-grade impact.&lt;/p>
&lt;h2 id="limitations-of-manual-testing">Limitations of Manual Testing&lt;/h2>
&lt;p>Manual testing involves human testers executing test cases without the assistance of tools or scripts. While this approach can be effective for certain types of testing, such as usability and exploratory testing, it has several limitations:&lt;/p></description></item><item><title>Why Not Just Use Code First Testing Tools</title><link>https://microsoft.github.io/PowerApps-TestEngine/context/why-not-just-use-code-first-testing-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/context/why-not-just-use-code-first-testing-tools/</guid><description>&lt;p>For many code-first developers, the initial inclination is to use familiar code-first testing tools like &lt;a href="https://microsoft.github.io/PowerApps-TestEngine/PowerApps-TestEngine/discussion/playwright-vs-test-engine/">Playwright&lt;/a> when working with low-code solutions. While this approach might seem logical, it can present several challenges, particularly in terms of scalability and efficiency.&lt;/p>
&lt;h2 id="scale-issues-and-resource-constraints">Scale Issues and Resource Constraints&lt;/h2>
&lt;p>Code-first testing tools often require specialized skills and knowledge, which can be in relatively short supply. This scarcity of resources can create bottlenecks in the testing process, as there may not be enough skilled testers available to meet the demands of large-scale projects. This limitation can slow down the development cycle and delay the release of new features and updates.&lt;/p></description></item></channel></rss>