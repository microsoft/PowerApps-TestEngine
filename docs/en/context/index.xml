<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Engine Context on PowerApps Test Engine</title>
    <link>http://localhost:1313/PowerApps-TestEngine/en/context/</link>
    <description>Recent content in Test Engine Context on PowerApps Test Engine</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/PowerApps-TestEngine/en/context/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/journey-map-assessment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/journey-map-assessment/</guid>
      <description>&lt;h1 id=&#34;journey-map-assessment&#34;&gt;Journey Map Assessment&lt;/h1&gt;&#xA;&lt;p&gt;{% interactive_assessment journey-map.json %}&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/journey-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/journey-map/</guid>
      <description>&lt;h1 id=&#34;understanding-the-journey-from-manual-testing-to-automated-testing&#34;&gt;Understanding the Journey from Manual Testing to Automated Testing&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Adopting automated testing can be a transformative journey for any organization. This journey involves several stages, each with its own set of challenges and opportunities. In this article, we will explore the key factors that influence the journey from manual testing to automated testing, highlighting both positive and negative impacts. This understanding will help you complete a self-assessment and make informed decisions to improve your testing processes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common Topics</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/common-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/common-topics/</guid>
      <description>&lt;p&gt;This page contains sets of related topics that enable you to quickly relate topics related to Automated Testing in the Power Platform. Whether you&amp;rsquo;re just getting started or looking to deepen your expertise, you&amp;rsquo;ll find valuable resources and links to help you succeed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;application-lifecycle-management&#34;&gt;Application Lifecycle Management&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Example&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-extending-test-engine/&#34;&gt;Extending the Test Engine to Support Testing of the CoE Starter Kit Setup and Upgrade Wizard&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The CoE Starter Kit has extended the test engine to support testing of the Setup and Upgrade Wizard by breaking down tests into smaller steps, using variables and collections, and leveraging the Experimental namespace to overcome limitations. This approach ensures thorough and reliable testing, leading to a more robust and user-friendly application.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-infrastructure-as-code/&#34;&gt;CoE Starter Kit -  Infrastructure As Code&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The combination of Terraform and the CoE Starter Kit offers a robust solution for managing Power Platform environments by leveraging infrastructure as code to ensure consistency and reliability. This approach simplifies the setup and maintenance of environments, allowing us to create the foundations of an automated test matrix to test setup and upgrade process.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/ring-deployment-model.md&#34;&gt;Ring Deployment Model&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Discussion on how new features of Test Engine are deployed and made available as part of wider feature release Application Lifecycle Management model&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;business-context&#34;&gt;Business Context&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Article&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;          &lt;th&gt;Feedback&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/strategic-importance-of-automated-testing-from-a-cxo-perspective.md&#34;&gt;The Strategic Importance of Automated Testing from a CXO Perspective&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Automated testing is not just a technical necessity but a strategic imperative for modern enterprises. From a CXO perspective, the implementation of automated testing frameworks can significantly enhance business outcomes, safeguard investments, and drive sustainable growth. Hereâ€™s a detailed look at why automated testing is crucial from a business standpoint, with a specific focus on the Power Apps Test Engine and how it addresses common challenges.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/&#34;&gt;Building a Sustainability Model&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;In the fast-paced world of software development, the initial rush of quickly building and deploying a solution can be exhilarating. However, the true challenge lies in keeping your great idea alive and ensuring its sustainability over time. This discussion explores how to build a sustainability model that not only keeps your solution relevant but also engages the community and stakeholders in the process.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/5&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/&#34;&gt;Embracing Testing Strategies for Low-Code Solutions: A Discussion for Enterprise Architects&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This discussion provides Enterprise Architects and related roles an overview of testing strategies for low-code solutions on the Power Platform, emphasizing the importance of automated testing, scalability, and integration with existing systems. It highlights key principles and practices to ensure that low-code applications are reliable, secure, and aligned with organizational goals.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/20&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/growing-to-enterprise-grade.md&#34;&gt;Growing to Enterprise Grade&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;As solutions scale, the need for robust testing practices becomes more critical. This article explores how to transition from small-scale projects to enterprise-grade solutions, emphasizing the importance of automated testing in maintaining high standards of reliability, security, and performance.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/14&#34;&gt;Discussion Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/impacts-on-people-process-and-tooling.md&#34;&gt;Impacts on People, Process, and Tooling&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Implementing automated testing requires a shift in mindset and practices. This article discusses the cultural and organizational changes needed to adopt automated testing, the impact on development and operations processes, and the tools that can facilitate this transformation.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/15&#34;&gt;Discussion Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/low-code-test-design-principles.md&#34;&gt;Low code Testing Principles&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;These principles provide a structured framework for creating robust tests that validate the functionality and performance of low-code applications.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/19&#34;&gt;Discussion Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/why-automated-testing.md&#34;&gt;Why Automated Testing&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Automated testing is essential for ensuring the reliability, security, and performance of applications. It provides a safety net that catches bugs early, reduces manual testing efforts, and ensures consistent quality. This is particularly important in the context of low-code Power Platform solutions, where rapid development cycles can lead to overlooked issues.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/12&#34;&gt;Discussion Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;generative-ai&#34;&gt;Generative AI&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Article&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;          &lt;th&gt;Feedback&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/generative-ai/&#34;&gt;Exploring Generative AI with Power Apps Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;As part of our proposed session, we could dive into the transformative capabilities of Generative AI within the Power Apps Test Engine. This discussion could highlight key scenarios: using Generative AI to convert natural language into defined test steps and leveraging AI Builder prompts to create and measure the potential business value of low-code solutions against Objectives and Key Results&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/transformative-power-of-ai.md&#34;&gt;Transformative Power of AI&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This article explores how AI can observe interactions and inform the agent to suggest happy paths, edge cases, and exception cases. This capability helps deliver a faster path to generate comprehensive test scenarios, enhancing the overall testing process.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/16&#34;&gt;Discussion Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Article&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;          &lt;th&gt;Feedback&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/enterprise-architecture-discussion/&#34;&gt;Embracing Testing Strategies for Low-Code Solutions: A Discussion for Enterprise Architects&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This discussion provides Enterprise Architects and related roles an overview of testing strategies for low-code solutions on the Power Platform, emphasizing the importance of automated testing, scalability, and integration with existing systems. It highlights key principles and practices to ensure that low-code applications are reliable, secure, and aligned with organizational goals.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/20&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/&#34;&gt;Implementing Effective Automated Testing Strategies in Power Platform Solutions&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Automated testing is a crucial aspect of modern software development, ensuring the reliability and efficiency of solutions. This discussion explores how to implement effective automated testing strategies in Power Platform solutions, using the CoE Starter Kit Setup and Upgrade wizard as an example. We will discuss the layers of automated testing across Power Apps, Power Automate, and Dataverse.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/6&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/introduction-to-testing-approaches/&#34;&gt;Introduction to Testing Approaches&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Read discussion and give your feedback on the concepts of automated testing looking at concepts like black box and white box testing for Power Apps, including Canvas Apps, Custom Pages, and Model Driven Applications. We&amp;rsquo;ll explore the importance of state management, connectors, workflows, and Dataverse state, and how to effectively test these components.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/4&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/data-simulation/&#34;&gt;Data Simulation&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This discussion aims to explore the concepts of data simulation and mocking in the context of low code solutions, particularly focusing on Power Fx commands for Dataverse calls, connectors, and workflows.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/9&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/test-authoring/&#34;&gt;Test Authoring&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;In this discussion, we will explore the overview of authoring test cases using the Test Engine. We will delve into various aspects such as the CoE Kit Test Case Authoring, discoverability of visual elements, Test Studio, and the settings and configurations of the Test Engine. Additionally, we will discuss the role of Generative AI in enhancing the test authoring process.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/11&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Example&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/custom-page-variables-and-collections/&#34;&gt;Testing Variables and Collections in Power Apps with the Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The Test Engine in Power Apps offers robust capabilities for testing variables and collections, simplifying application state management. By leveraging the Set() function, developers can directly change the state of the application, making it easier to verify functionality and handle various scenarios.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/coe-kit-powerautomate-testing/&#34;&gt;CoE Starter Kit Power Automate Testing&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The CoE Starter Kit Power Automate Testing feature is in the early stages of planning and aims to address the needs of users building and deploying Power Automate Cloud flows. Proper testing of these flows is crucial for maintaining accurate data collection and reporting, which supports better decision-making and governance within the organization&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;technical&#34;&gt;Technical&lt;/h2&gt;&#xA;&lt;h3 id=&#34;context&#34;&gt;Context&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Context&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/test-engine-extensibility.md&#34;&gt;Test Engine Extensibility&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Discussion on Managed Extensibility Framework (MEF) providers for Test Engine&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/test-engine-providers.md&#34;&gt;Test Engine Providers&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Discussion on providers available for Test Engine to interact with different Power Platform resources&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/debugging-test-engine-test.md&#34;&gt;Debugging Test Engine Tests&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Follow this guide on how to effectively debug your tests using a local build from source strategy&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/keeping-up-to-date.md&#34;&gt;Keeping up to date&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Staying current with the latest features and updates in the Power Apps Test Engine allows you to leverage new capabilities and ensuring optimal performance. Here&amp;rsquo;s how you can keep up to date based on the version of test engine you are using.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/deep-dive-testengine-layers.md&#34;&gt;Deep Dive: Test Engine Layers&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This article is designed to walk through the different layers of how test engine tests are implemented and understand the key interactions between the layers&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/testing-localized-power-app.md&#34;&gt;Testing Localized Power Apps&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This article discusses the testing of localized Power Apps&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;discussion-articles&#34;&gt;Discussion Articles&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Article&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;          &lt;th&gt;Feedback&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/low-code-testing-for-code-first-developer/&#34;&gt;Low Code Power Platform Testing for the Code First Developer&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This article is intended as a starter for discussion and contains content that is under development. It is based on experiences from teams like the Power CAT Engineering team as they apply low code testing principles to the low code Power Platform solutions they build and maintain. Ideally, this discussion serves as a great starting point to foster collaboration and gain input to help shape low code automation and engineering excellence in the wider low code Power Platform community.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/2&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/playwright-vs-test-engine/&#34;&gt;Playwright vs Power Apps Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;When it comes to testing low-code Power Platform applications, a common question arises: why not just use Playwright to directly test a Power App rather than using the Power Apps Test Engine? This discussion aims to explore the strengths and limitations of both tools and provide insights into their best use cases.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/1&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/authentication/&#34;&gt;Authentication in Power Apps Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Authentication is a critical component of the test automation process. The sample script employs browser-based authentication, which offers a range of options to authenticate with Microsoft Entra. This method generates a persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Grant-Archibald-MS/powerfuldev-testing/issues/8&#34;&gt;Link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Example&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/extending-testengine-powerfx-with-with-csharp-test-scripts/&#34;&gt;Extending TestEngine Power FX with C# Test Scripts&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The extensibility of TestEngine Power FX using C# test scripts allows developers to integrate web-based Playwright commands through code-first extensibility, enhancing browser automation capabilities. This approach enables the creation of custom test scripts that leverage Playwright&amp;rsquo;s powerful features, improving productivity and maintainability by focusing on high-level test logic while handling common code efficiently&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/understanding-no-cliffs-extensibility-model/&#34;&gt;Understanding the &amp;ldquo;No Cliffs&amp;rdquo; Extensibility Model of Power Apps Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The &amp;ldquo;no cliffs&amp;rdquo; extensibility model of Power Apps Test Engine ensures that users can extend its capabilities without encountering barriers, providing a seamless experience for both makers and developers. By leveraging Power FX and C# test scripts, this model simplifies handling complex scenarios like Power Apps consent dialogs to enhancing the efficiency and reliability of the testing process&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/using-powerfx-namespaces-in-testing/&#34;&gt;Using Power Fx Namespaces in Testing&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Power Fx namespaces allow developers to organize and separate different sets of functions within the language, helping to maintain clarity and avoid conflicts. By distinguishing between common features and specific actions, and separating stable features from experimental ones, namespaces ensure the stability and reliability of Power Apps.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Context&lt;/th&gt;&#xA;          &lt;th&gt;Notes&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/security-first-initiative.md&#34;&gt;Secure First Initiative&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;By integrating these principles, we aim to create robust, resilient, and secure applications that can withstand evolving cyber threats.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Discussion&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/authentication/&#34;&gt;Authentication in Power Apps Test Engine&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Authentication is a critical component of the test automation process. The sample script employs browser-based authentication, which offers a range of options to authenticate with Microsoft Entra. This method generates a persistent browser cookie, allowing for non-interactive execution of subsequent tests. The management of these browser cookies is governed by the guidelines provided in the Microsoft Entra documentation on session lifetime and conditional access policies.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Example&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/examples/testing-security/&#34;&gt;Testing Security&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This article provides an example of how we can test browser-based authentication using multiple personas using Multi-Factor Authentication (MFA) with persistent cookie state and Power Apps security for Power Apps.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Debugging Test Engine Tests</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/debugging-test-engine-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/debugging-test-engine-test/</guid>
      <description>&lt;p&gt;For code-first developers eager to dive deep into the mechanics of the Test Engine, understanding how to debug authentication modules, providers, or Power Fx modules is crucial. Follow this guide on how to effectively debug your tests using a local build from source strategy.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up-your-environment&#34;&gt;Setting Up Your Environment&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Open the Project: Begin by opening the PowerApps-TestEngine folder in Visual Studio Code. This is your main workspace where you have cloned the repository to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get Started Assessment</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-assessment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-assessment/</guid>
      <description>&lt;p&gt;Welcome to site focused on low code testing of Power Platform using Test Engine. Use the assessment below to help you find the best place to start.&lt;/p&gt;&#xA;&lt;p&gt;{% interactive_assessment getting-started.json %}&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get Started Now</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/get-started-now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/get-started-now/</guid>
      <description>&lt;p&gt;Welcome, early adopters! If you&amp;rsquo;re eager to try the current version of Power Platform Automated Testing, you&amp;rsquo;re in the right place. This guide will help you get started with the necessary components and provide you with two paths to explore automated testing.&lt;/p&gt;&#xA;&lt;p&gt;There is also a work in progress &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/learning/&#34;&gt;Learning module&lt;/a&gt; to help you get started.&#xA;{: .notice&amp;ndash;success}&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;To get started, you&amp;rsquo;ll need the following components:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ability to Clone Repository&lt;/strong&gt;: Use Git command line or GitHub Desktop to clone the repository.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PowerShell&lt;/strong&gt;: Ensure you have PowerShell installed on your machine.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Power Platform Command Line Tools&lt;/strong&gt;: Install the Power Platform Command Line tools to interact with your Power Platform environment.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;.NET 8.0 SDK&lt;/strong&gt;: Download and install the .NET 8.0 SDK to build the code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Azure CLI&lt;/strong&gt;: Install the Azure CLI&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This can seem daunting but the following steps will help you with this process assuming you are using Microsoft Windows as your local operating system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started/</guid>
      <description>&lt;h2 id=&#34;welcome&#34;&gt;Welcome&lt;/h2&gt;&#xA;&lt;p&gt;When it comes to Power Platform Automated Testing, where you start will depend on your &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/powerfuldev-testing/roles-and-responsibilities&#34;&gt;role in the organization&lt;/a&gt; and your willingness to work as an early adopter. This guide will help you navigate the key items to consider as you embark on this journey.&lt;/p&gt;&#xA;&lt;p&gt;{% include feature_row type=center %}&lt;/p&gt;&#xA;&lt;p&gt;Not sure where to start? Try our &lt;a href=&#34;./getting-started-assessment&#34; class=&#34;btn btn--primary&#34;&gt;Getting started assessment&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;business&#34;&gt;Business&lt;/h2&gt;&#xA;&lt;p&gt;Business users play a crucial role in the successful implementation of Power Platform Automated Testing. As early adopters, your involvement and feedback are essential to drive innovation and ensure the solutions meet your needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started Architects</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-architects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-architects/</guid>
      <description>&lt;p&gt;Architects play a pivotal role in the successful implementation of Power Platform Automated Testing. Your expertise and strategic oversight are essential to ensure that low-code solutions are robust, scalable, and aligned with organizational goals. By embracing automated testing, you can drive innovation and enhance the quality of your solutions.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-should-architects-care&#34;&gt;Why Should Architects Care?&lt;/h3&gt;&#xA;&lt;p&gt;Automated testing in the Power Platform allows you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ensure Quality&lt;/strong&gt;: Implement rigorous testing standards to validate the functionality and performance of low-code solutions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enhance Integration&lt;/strong&gt;: Seamlessly integrate low-code solutions with existing IT investments, ensuring a cohesive technology ecosystem.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Drive Innovation&lt;/strong&gt;: Enable rapid iteration and improvement of solutions, staying ahead of the competition.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Maintain Compliance&lt;/strong&gt;: Ensure that solutions comply with industry standards and organizational policies through consistent testing.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;call-to-action&#34;&gt;Call to Action&lt;/h3&gt;&#xA;&lt;p&gt;Start planning for the impact of low-code automated testing today. Here are some steps you can take:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started Business Roles</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-business/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-business/</guid>
      <description>&lt;p&gt;Business users play a crucial role in the successful implementation of Power Platform Automated Testing. As early adopters, your involvement and feedback are essential to drive innovation and ensure the solutions meet your needs. By embracing low-code automated testing, you can significantly enhance the efficiency and reliability of your business processes.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-should-business-users-care&#34;&gt;Why Should Business Users Care?&lt;/h3&gt;&#xA;&lt;p&gt;Automated testing in the Power Platform allows you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Improve Efficiency&lt;/strong&gt;: Automate repetitive testing tasks, freeing up time for more strategic activities.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enhance Quality&lt;/strong&gt;: Ensure that your solutions are robust and perform as expected, reducing the risk of errors.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Drive Innovation&lt;/strong&gt;: Quickly iterate and improve your solutions, staying ahead of the competition.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ensure Compliance&lt;/strong&gt;: Maintain compliance with industry standards and regulations through consistent and thorough testing.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;call-to-action&#34;&gt;Call to Action&lt;/h3&gt;&#xA;&lt;p&gt;Start planning for the impact of low-code automated testing today. Here are some steps you can take:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started Technical Users</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-technical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/getting-started-technical/</guid>
      <description>&lt;p&gt;Technical users are at the forefront of implementing and optimizing Power Platform Automated Testing. Your technical expertise and willingness to adopt new technologies are crucial for driving innovation and ensuring the success of low-code solutions. By embracing automated testing, you can enhance the quality and efficiency of your development processes.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-should-technical-users-care&#34;&gt;Why Should Technical Users Care?&lt;/h3&gt;&#xA;&lt;p&gt;Automated testing in the Power Platform allows you to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Improve Productivity&lt;/strong&gt;: Automate repetitive testing tasks, freeing up time for more complex development work.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ensure Quality&lt;/strong&gt;: Implement rigorous testing standards to validate the functionality and performance of low-code solutions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stay Ahead&lt;/strong&gt;: Adopt the latest features and tools to continuously improve your solutions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enhance Collaboration&lt;/strong&gt;: Work seamlessly with other teams to ensure a cohesive development process.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;call-to-action&#34;&gt;Call to Action&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Technical Getting Started&#34; src=&#34;http://localhost:1313/PowerApps-TestEngine/powerfuldev-testing/assets/images/technical-get-started.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Growing to Enterprise Grade</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/growing-to-enterprise-grade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/growing-to-enterprise-grade/</guid>
      <description>&lt;p&gt;As your solutions scale, the need for robust testing practices becomes more critical. Growing to enterprise-grade involves adopting a model that can deploy on demand and rapidly respond to new features, errors, or security requirements. This model relies on the confidence provided by automated tests, allowing you to meet business needs while adhering to continuous integration and deployment (CI/CD) processes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-enterprise-grade-model&#34;&gt;The Enterprise-Grade Model&lt;/h2&gt;&#xA;&lt;p&gt;An enterprise-grade model is designed to handle the complexities and demands of large-scale applications. It ensures that your solutions are &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/&#34;&gt;sustainable&lt;/a&gt;, reliable, secure, and performant, even as they grow in size and complexity. Key components of this model include:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Impacts on People, Process, and Tooling</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/impacts-on-people-process-and-tooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/impacts-on-people-process-and-tooling/</guid>
      <description>&lt;p&gt;In the evolving landscape of software development, the integration of low-code solutions with existing automated testing and continuous integration (CI) practices is crucial. This approach, known as the &amp;ldquo;no cliffs&amp;rdquo; extensibility model, ensures that investments in automated testing and CI can be seamlessly integrated into low-code environments. This model supports both low-code-only and code-first deployment models, offering the best of both worlds.&lt;/p&gt;&#xA;&lt;h2 id=&#34;no-cliffs-extensibility-model&#34;&gt;No Cliffs Extensibility Model&lt;/h2&gt;&#xA;&lt;p&gt;The no cliffs extensibility model is designed to bridge the gap between low-code and traditional code-first development. It allows organizations to leverage their existing investments in automated testing and CI while embracing the agility and speed of low-code development. This model ensures that there are no abrupt transitions or &amp;ldquo;cliffs&amp;rdquo; when moving between low-code and code-first approaches.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interactive Learning</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/interactive-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/interactive-learning/</guid>
      <description>&lt;h2 id=&#34;the-goal-of-interactive-documentation&#34;&gt;The Goal of Interactive Documentation&lt;/h2&gt;&#xA;&lt;p&gt;The primary goal of interactive documentation is to create a living, breathing resource that evolves with the project and adapts to the needs of its users. Unlike static documentation, which can quickly become outdated and cumbersome, interactive documentation is designed to be:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Engaging&lt;/strong&gt;: Incorporates multimedia elements and interactive examples to enhance understanding.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User-Centric&lt;/strong&gt;: Tailored to meet the specific needs of different personas, ensuring that everyone from business stakeholders to technical experts can find the information they need.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;interactive-assessments&#34;&gt;Interactive Assessments&lt;/h2&gt;&#xA;&lt;p&gt;To further enhance the value of interactive documentation, incorporating interactive assessments can be highly beneficial. These assessments can include conditional questions that adapt based on user responses, providing a personalized evaluation experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keeping up to date</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/keeping-up-to-date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/keeping-up-to-date/</guid>
      <description>&lt;p&gt;Staying current with the latest features and updates in the Power Apps Test Engine allows you to leverage new capabilities and ensuring optimal performance. Here&amp;rsquo;s how you can keep up to date based on the version of test engine you are using.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-concept-ring-deployment-model&#34;&gt;Key Concept: Ring Deployment Model&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/ring-deployment-model.md&#34;&gt;Ring Deployment Model&lt;/a&gt; is a phased approach to rolling out new features and updates.&lt;/p&gt;&#xA;&lt;h3 id=&#34;keeping-up-to-date&#34;&gt;Keeping Up to Date&lt;/h3&gt;&#xA;&lt;h4 id=&#34;inner-ring-canary-users&#34;&gt;Inner Ring (Canary Users)&lt;/h4&gt;&#xA;&lt;p&gt;As an Inner Ring user, you are among the first to test new features. Keeping up to date involves using source control to fetch the latest changes. Hereâ€™s how you can do it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Layers of the Power Apps Test Engine</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/deep-dive-testengine-layers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/deep-dive-testengine-layers/</guid>
      <description>&lt;p&gt;This article is designed to walk through the different layers of how test engine tests are implemented and understand the key interactions between the layers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Overview diagram of layers of test engine across recording, test case definition, test steps&#34; src=&#34;./media/test-engine-layers.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let have a look at the key layers that make up the Test Engine testing process.&lt;/p&gt;&#xA;&lt;p&gt;Note: This deep dive does not include the common login process which is covered in more depth in &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/security-testengine-storage-state-deep-dive.md&#34;&gt;Deep Dive - Test Engine Storage State Security&lt;/a&gt;&#xA;{: .notice&amp;ndash;success}&lt;/p&gt;</description>
    </item>
    <item>
      <title>Low-Code Testing Principles for Power Platform</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/low-code-test-design-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/low-code-test-design-principles/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;As we move towards &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/growing-to-enterprise-grade.md&#34;&gt;enterprise-grade&lt;/a&gt; solutions created using the Power Platform, it&amp;rsquo;s essential to ensure the reliability and functionality of these applications. This article explores guiding principles for low-code testing, focusing on techniques such as record and replay, isolation, human-in-the-loop, &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/context/transformative-power-of-ai.md&#34;&gt;generative AI&lt;/a&gt; for test suggestions, state changes observation, single responsibility tests, assertion for verification, abstract complexity, trust, and simplicity. Let&amp;rsquo;s quickly summarize the principles and then define what each principle is with examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ring Deployment Model</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/ring-deployment-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/ring-deployment-model/</guid>
      <description>&lt;p&gt;In the ever-evolving landscape of software development, the Ring Deployment Model stands out as a strategic approach to rolling out new features and updates. This model, inspired by the concentric rings of a tree, ensures that changes are introduced in a controlled, phased manner, minimizing risks and maximizing feedback.&lt;/p&gt;&#xA;&lt;p&gt;Imagine a bustling city where a new public transportation system is about to be launched. Instead of opening all routes simultaneously, the city planners decide to test the system in a small neighborhood first. This pilot phase allows them to gather feedback, identify issues, and make necessary adjustments before expanding to larger areas. This is the essence of the Ring Deployment Model.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Roadmap Alignment</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/roadmap-alignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/roadmap-alignment/</guid>
      <description>&lt;h2 id=&#34;managed-operations&#34;&gt;Managed Operations&lt;/h2&gt;&#xA;&lt;p&gt;As outlined at Ignite by Nirav Shah the Corporate Vice President (CVP) for Dataverse in &lt;a href=&#34;https://www.microsoft.com/en-us/power-platform/blog/it-pro/introducing-managed-operations-for-microsoft-dynamics-365-and-power-platform/&#34;&gt;Introducing managed operations for Microsoft Dynamics 365 and Power Platform&lt;/a&gt; we introduced the concept of Managed Operations which aligns the work for this session with wider Managed features in the Power Platform.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Overview diagram of Power Platform Managed Operations&#34; src=&#34;https://www.microsoft.com/en-us/power-platform/blog/wp-content/uploads/2024/11/IntroManagedOps-2048x1164.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;managed-operations-definition&#34;&gt;Managed Operations Definition&lt;/h3&gt;&#xA;&lt;p&gt;Power Platform managed operations, a suite of capabilities to empower organizations of all sizes to build, deploy, and operate their most critical workloads. Built with both existing and emerging AI-driven solutions in mind, these capabilities ensure stability and minimize disruption while maximizing the productivity of operations teams.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secure First Initiative</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/security-first-initiative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/security-first-initiative/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.microsoft.com/trust-center/security/secure-future-initiative&#34;&gt;Secure First Initiative (SFI)&lt;/a&gt; is a comprehensive approach to ensuring that security is embedded in every aspect of our solutions. This initiative is built on three core principles: &lt;strong&gt;Secure By Design&lt;/strong&gt;, &lt;strong&gt;Secure By Default&lt;/strong&gt;, and &lt;strong&gt;Secure in Operations&lt;/strong&gt;. By integrating these principles, we aim to create robust, resilient, and secure applications that can withstand evolving cyber threats.&lt;/p&gt;&#xA;&lt;h2 id=&#34;security-principles&#34;&gt;Security Principles&lt;/h2&gt;&#xA;&lt;p&gt;In today&amp;rsquo;s digital landscape, security is paramount. The Secure First Initiative (SFI) emphasizes a proactive approach to security, ensuring that every layer of our solutions is fortified against potential threats. This involves a culture of continuous improvement, robust governance, and adherence to best practices across all stages of development and operations. Lets look at the key principles.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Storage State Deep Dive</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/security-testengine-storage-state-deep-dive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/security-testengine-storage-state-deep-dive/</guid>
      <description>&lt;p&gt;One of the key elements of automated discussion using the multiple profiles of automated testing of Power apps is the security model to allow login and the security around these credentials. Understanding this deep dive is critical to comprehend how the login credential process works, how login tokens are encrypted, and how this relates to the Multi-Factor Authentication (MFA) process. Additionally, we will explore the controls that the Entra security team can put in in place and the security model across Test Engine, Playwright, Data Protection API, OAuth Login to Dataverse, Dataverse, and Key Value Store.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Engine Extensibility</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/test-engine-extensibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/test-engine-extensibility/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s dive into the world of &lt;strong&gt;Test Engine Extensibility&lt;/strong&gt;. Whether you&amp;rsquo;re new to this concept or looking to deepen your understanding, this guide will walk you through the essentials and show you how to leverage the power of extensibility in your testing workflows.&lt;/p&gt;&#xA;&lt;p&gt;{% include figure popup=true image_path=&amp;quot;/context/media/test-engine-extensibility.png&amp;quot; alt=&amp;ldquo;Overview diagram of test engine extensibility&amp;rdquo; %}&lt;/p&gt;&#xA;&lt;h2 id=&#34;common-features-of-the-test-engine&#34;&gt;Common Features of the Test Engine&lt;/h2&gt;&#xA;&lt;p&gt;First things first, let&amp;rsquo;s talk about what the test engine brings to the table:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Engine Providers</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/test-engine-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/test-engine-providers/</guid>
      <description>&lt;p&gt;The evolution of the Test Engine within the Power Platform ecosystem has been remarkable. Initially, the Test Engine was limited to supporting only canvas applications. However, with the introduction of the new provider model, the capabilities have expanded significantly.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-first-version-canvas-applications-only&#34;&gt;The First Version: Canvas Applications Only&lt;/h2&gt;&#xA;&lt;p&gt;When the Test Engine was first introduced, it was designed to support canvas applications exclusively. Canvas applications are a type of app within the Power Platform that allows users to design and build apps by dragging and dropping elements onto a canvas, much like creating a slide in PowerPoint. This approach is highly intuitive and enables rapid development of custom applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Engine Security - Authentication Changes</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/security-testengine-authentication-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/security-testengine-authentication-changes/</guid>
      <description>&lt;p&gt;When the experimental release of the Test Engine was initially made available, the only authentication method provided was through environment variables for the username and password. This approach presented several issues. Firstly, it relied on Basic authentication, which is inherently less secure as it transmits credentials in an easily decodable format. Additionally, this method did not align with Microsoft&amp;rsquo;s strong recommendations for Multi-Factor Authentication (MFA), which is crucial for enhancing security by requiring multiple forms of verification.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing Localized Power Apps</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/testing-localized-power-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/testing-localized-power-app/</guid>
      <description>&lt;p&gt;Localization is an important aspect of software development that ensures applications are accessible and user-friendly for people from different linguistic and cultural backgrounds. Despite its importance, localization is often seen as a challenging task and is sometimes deprioritized. This post explores the significance of localization, the common hurdles faced, and how to effectively test localized Power Apps.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-importance-of-localization&#34;&gt;The Importance of Localization&lt;/h2&gt;&#xA;&lt;p&gt;Localization goes beyond mere translation. It involves adapting the content, layout, and functionality of an application to meet the cultural and linguistic needs of users in different regions. Proper localization can significantly enhance user experience, increase market reach, and improve customer satisfaction.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Strategic Importance of Automated Testing from a CXO Perspective</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/strategic-importance-of-automated-testing-from-a-cxo-perspective/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/strategic-importance-of-automated-testing-from-a-cxo-perspective/</guid>
      <description>&lt;p&gt;Automated testing is not just a technical necessity but a strategic imperative for modern enterprises. From a CXO perspective, the implementation of automated testing frameworks can significantly enhance business outcomes, safeguard investments, and drive sustainable growth. Hereâ€™s a detailed look at why automated testing is crucial from a business standpoint, with a specific focus on the Power Apps Test Engine and how it addresses common challenges.&lt;/p&gt;&#xA;&lt;h3 id=&#34;pros-and-cons-of-automated-testing&#34;&gt;Pros and Cons of Automated Testing&lt;/h3&gt;&#xA;&lt;p&gt;Lets start off by looking at some possible advantages and disadvantages that Automated testing can provide:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transformative Power of AI</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/transformative-power-of-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/transformative-power-of-ai/</guid>
      <description>&lt;p&gt;The transformative power of AI in the realm of automated testing with the Power Platform lies in its ability to observe by example as you interact with the created low-code solution. By augmenting this with your knowledge and expectations of how the solution should work, Generative AI can suggest comprehensive test suites and cases. These suggestions cover expected &amp;ldquo;happy path&amp;rdquo; tests, edge cases, and exception cases, bridging the gap in domain knowledge of testing practices that may be new to many developers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Feature Branches</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/understanding-feature-branches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/understanding-feature-branches/</guid>
      <description>&lt;h2 id=&#34;what-is-a-git-feature-branch&#34;&gt;What is a Git Feature Branch?&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you&amp;rsquo;re writing a book. You have your main storyline, but you also want to explore a few alternative plots without affecting the main story. In the world of software development, Git branches work similarly. A Git branch allows you to create a separate line of development, where you can make changes, experiment, and test new features without altering the main project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-use-branches&#34;&gt;Why Use Branches?&lt;/h2&gt;&#xA;&lt;p&gt;Branches are incredibly useful for several reasons:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Automated Testing?</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/why-automated-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/why-automated-testing/</guid>
      <description>&lt;p&gt;Automated testing is a cornerstone of modern software development, ensuring that applications are &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/building-a-sustainability-model/&#34;&gt;sustainable&lt;/a&gt;, reliable, secure, and performance. In the context of low-code Power Platform solutions, automated testing becomes even more critical due to the rapid development cycles and the need for enterprise-grade reliability.&lt;/p&gt;&#xA;&lt;h2 id=&#34;learned-expectations-of-automated-testing&#34;&gt;Learned Expectations of Automated Testing&lt;/h2&gt;&#xA;&lt;p&gt;In traditional software development, automated testing has proven to be invaluable for catching bugs early, reducing manual testing efforts, and ensuring consistent quality. These benefits are equally applicable to low-code solutions, where the speed of development can sometimes lead to overlooked issues. Automated tests provide a safety net, ensuring that new features do not break existing functionality and that the application remains robust as it evolves.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Not Just Manual Testing</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/why-not-just-manual-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/why-not-just-manual-testing/</guid>
      <description>&lt;p&gt;Imagine an error occurs outside normal operating hours, and the person who created the application is on holiday. How can you effectively diagnose the problem, propose changes, and deploy with confidence that the solution will continue to work? This example demonstrates the limitations of relying solely on manual testing and developing a comprehensive &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/implementing-effective-automated-testing-strategies-in-power-platform-solutions/&#34;&gt;testing strategy&lt;/a&gt; as applications reach toward enterprise-grade impact.&lt;/p&gt;&#xA;&lt;h2 id=&#34;limitations-of-manual-testing&#34;&gt;Limitations of Manual Testing&lt;/h2&gt;&#xA;&lt;p&gt;Manual testing involves human testers executing test cases without the assistance of tools or scripts. While this approach can be effective for certain types of testing, such as usability and exploratory testing, it has several limitations:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Not Just Use Code First Testing Tools</title>
      <link>http://localhost:1313/PowerApps-TestEngine/en/context/why-not-just-use-code-first-testing-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/PowerApps-TestEngine/en/context/why-not-just-use-code-first-testing-tools/</guid>
      <description>&lt;p&gt;For many code-first developers, the initial inclination is to use familiar code-first testing tools like &lt;a href=&#34;http://localhost:1313/PowerApps-TestEngine/PowerApps-TestEngine/discussion/playwright-vs-test-engine/&#34;&gt;Playwright&lt;/a&gt; when working with low-code solutions. While this approach might seem logical, it can present several challenges, particularly in terms of scalability and efficiency.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scale-issues-and-resource-constraints&#34;&gt;Scale Issues and Resource Constraints&lt;/h2&gt;&#xA;&lt;p&gt;Code-first testing tools often require specialized skills and knowledge, which can be in relatively short supply. This scarcity of resources can create bottlenecks in the testing process, as there may not be enough skilled testers available to meet the demands of large-scale projects. This limitation can slow down the development cycle and delay the release of new features and updates.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
