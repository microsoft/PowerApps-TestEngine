<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerApps Test Engine</title><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/</link><description>Recent content on PowerApps Test Engine</description><generator>Hugo</generator><language>en</language><atom:link href="https://microsoft.github.io/PowerApps-TestEngine/guidance/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/authoring/</guid><description>&lt;h1 id="test-authoring">Test Authoring&lt;/h1>
&lt;p>The following test authoring method exist for different personas to create and edit tests:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Considerations&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Test Studio&lt;/td>
 &lt;td>Record of test and export as Test Engine Yaml&lt;/td>
 &lt;td>1.	Limitations in support as documented in &lt;a href="https://learn.microsoft.com/power-apps/maker/canvas-apps/test-studio#known-limitations">Test Studio - Power Apps | Microsoft Learn&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Visual Studio Code Extension&lt;/td>
 &lt;td>Experimental Visual Studio Code extension that offers Text Completion and Syntax validation&lt;/td>
 &lt;td>1.	Extension are still work in progress&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	More likely to meet the skill level of advanced makers and code first developers&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AI Generated Tests&lt;/td>
 &lt;td>Use of Generative AI to define test cases and test steps&lt;/td>
 &lt;td>1.	AI Generated tests is not yet a Generally available feature.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="generative-ai-in-testing">Generative AI in Testing&lt;/h2>
&lt;p>Generative AI can be used to create test cases, automate repetitive tasks, and analyze test results, enhancing efficiency and accuracy across the board. By using Generative AI the process of creating and editing tests for each persona can be simplified and augumented to improve and maintain test coverage.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/executionanddeploymentprocessintegration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/executionanddeploymentprocessintegration/</guid><description>&lt;h1 id="test-execution-and-deployment-process-integration">Test Execution and Deployment Process Integration&lt;/h1>
&lt;h2 id="execution-agents">Execution Agents&lt;/h2>
&lt;p>Tests can be executed as part of the deployment process using agents configured in Low code Power Automated Hosted Process or Azure DevOps CI/CD pipelines. These agents will:&lt;/p>
&lt;ul>
&lt;li>Run automated tests during the build phase to catch issues early.&lt;/li>
&lt;li>Execute end-to-end tests post-deployment to validate the entire system.&lt;/li>
&lt;/ul>
&lt;h2 id="test-agent-selection">Test Agent Selection&lt;/h2>
&lt;p>The following table outlines some factors that can be considered when selecting a test execution environment for the tests.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/operationaltests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/operationaltests/</guid><description>&lt;h1 id="operational-team-requirements">Operational Team Requirements&lt;/h1>
&lt;p>The operations team could be the original maker or a dedicated team that is responsible for continuous test execution of tests to verify and maintain the health of the deployed solution. Key requirements include:&lt;/p>
&lt;ul>
&lt;li>Monitoring test results and system performance metrics.&lt;/li>
&lt;li>Scheduling regular test runs to detect and address issues proactively.&lt;/li>
&lt;li>Ensuring test environments are aligned with production settings.&lt;/li>
&lt;/ul>
&lt;p>This process extends beyond the initial deployment of the solution but throughout out its entire operational lifetime. Over the life of the solution many changes can occur. For example, changing business requirements, changes in the maker team owning and supporting the solution, updated product features, and updated tenant and environment configurations may necessitate adjustments to the testing and operational processes. The operations team must be prepared to adapt to these changes to ensure the continued reliability and performance of the solution.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/overview/</guid><description>&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>This guidanace provides an overview low code compared to high code testing and end to end context and example.&lt;/p>
&lt;h2 id="low-code-vs-high-code-testing">Low code vs High Code Testing&lt;/h2>
&lt;p>Low code testing involves creating tests using minimal code, often leveraging tools and frameworks that simplify the process. This approach leverages building blocks like Power Fx functions, which is designed to be user-friendly and accessible to those with limited coding experience.&lt;/p>
&lt;p>In contrast, high code testing requires extensive programming knowledge and the use of complex languages like C#, Java, JavaScript or Python. High code solutions also provide a wide array of choices on how the application can be created. These choices make the process of testing these solutions more specialized and require more technical expertise. By utilizing low code testing, developers and makers can quickly and efficiently create tests without the need for deep technical expertise, making it an ideal choice for many Power Platform solutions. The Test Engine approach provides a extension module to allow high code elements to be included as part of a test case.&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/personas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/personas/</guid><description>&lt;h1 id="role-of-test-personas">Role of Test Personas&lt;/h1>
&lt;h2 id="different-test-personas">Different Test Personas&lt;/h2>
&lt;p>Different people, ranging from &amp;ldquo;code-first&amp;rdquo; testers to members of the maker community, will play distinct roles in the testing process:&lt;/p>
&lt;ul>
&lt;li>Code-First Testers: Developers with a deep understanding of testing methodologies and tools.&lt;/li>
&lt;li>Maker Community: Business users with limited technical knowledge who can leverage low-code/no-code testing tools.&lt;/li>
&lt;li>Reviewers: Who want to perform gated release and approval of changes and test results cso that they can be reviewed prior to release&lt;/li>
&lt;li>Support Engineers: WHo want to Execute tests that validate functionality and operational health of deployed solution. They may also author new tests to illustrate an issue that needs to be resolved.&lt;/li>
&lt;/ul>
&lt;h2 id="scaling-the-impact-of-testing">Scaling the Impact of testing&lt;/h2>
&lt;p>Scalability is achieved by providing appropriate tools and training for each persona, enabling them to contribute effectively to the testing process. Depending on the team and the technology landscape they could look to mix and match different elements to best support their quality strategy&lt;/p></description></item><item><title/><link>https://microsoft.github.io/PowerApps-TestEngine/guidance/securityconsiderations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microsoft.github.io/PowerApps-TestEngine/guidance/securityconsiderations/</guid><description>&lt;h1 id="security-considerations">Security Considerations&lt;/h1>
&lt;p>Executing tests securely is paramount especially where interactive user accounts are used. The following table outlines some factors that should be considered and how this can map to Power Platform quality testing.&lt;/p>
&lt;h2 id="authentication">Authentication&lt;/h2>
&lt;p>The following authentication options could be considered&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Type&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;th>Considerations&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Browser Persistent Cookies&lt;/td>
 &lt;td>One time login and using persistent cookies for headless login&lt;/td>
 &lt;td>1.	Storage of Browser Context that contains Persistent Cookies&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Configuration of Persistent Cookie settings in Entra&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>3.	Conditional Access Policies&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Certificate Based Authentication&lt;/td>
 &lt;td>Configuration of Entra to allow Certificate Based Authentication&lt;/td>
 &lt;td>1.	Issue and Revocation of Certificates&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Certificate renewal process&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Conditional Access Policies&lt;/td>
 &lt;td>Compliance with applied conditional Access polices&lt;/td>
 &lt;td>1.	Supported Browser type selection. For example, Edge, Chrome&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>2.	Test Agent network locations&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>3.	Risk profile of users&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="multi-factor-authentication--authenticator-enabled">Multi Factor Authentication â€“ Authenticator Enabled&lt;/h2>
&lt;p>When using Two-factor authentication making use of authentication applications like Microsoft Authenticator consider the following:&lt;/p></description></item></channel></rss>