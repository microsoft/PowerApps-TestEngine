default: "sick-days"
playgrounds:
  - shortId: "sick-days"
    title: "HR Agent - Self Service Enquiry"
    description: "Explore a self service request for sick leave balance"
    code: |
      // Setup:
      Experimental.SimulateResponse({
        Type: "message", 
        When: {Pattern: "leave"},
        Then: {SendText: "What leave enquiry do you have?"}
      });
      Experimental.SimulateResponse({
        Type: "message", 
        When: {Type: "How many sick days have I taken"},
        Then: Table(
          {SendText: "So far, you have taken 5 days off as sick leave"},
          {SendText: "Can I do anything else for you?"}
        )
      });
      // Code:
      Experimental.SendText("I have a question about my leave balance");
      Experimental.WaitUntilMessage({Text: "What leave enquiry do you have?"});
      Experimental.SendText("How many sick days have I taken");
      Set(matches,Experimental.WaitUntilMessage({Pattern: "So far, you have taken {days} days off as sick leave"}));
      Assert(CountRows(matches)=1);
      Assert(matches.Value>0);
      Experimental.WaitUntilMessage("Can I do anything else for you?");
    steps: |
      - Press "Try It!" to see that the value of **true** is returned
    relatedTasks:
      - "sick-days"
      - "leave-statement"
      - "meaning-match"
  - shortId: "leave-statement"
    title: "HR Agent - Self Service Enquiry Adaptive Card"
    description: "Validate leave statement adaptive card data"
    code: |
      // Setup:
      Experimental.SimulateResponse({
        Type: "message", 
        When: {Pattern: "leave"},
        Then: {SendText: "What leave enquiry do you have?"}
      });
      Experimental.SimulateResponse({
        Type: "message", 
        When: {Type: "balance"},
        Then: Table(
          Experimental.LoadAdaptiveCard("sample.json")
        )
      });
      // Code:
      SendText("I have a question about my leave balance");
      Experimental.WaitUntilMessage({Text: "What leave enquiry do you have?"});
      Experimental.SendText("What is my balance?");
      Set(card,Experimental.WaitUntilMessage({AdaptiveCard: True}));
      Assert(CountRows(card)=1);
      Set(heading, Expermental.AdpativeCardMatch(card, {Type: "Heading"}));
      Assert(First(heading).Text="Leave Statement");
      Set(balance, Expermental.AdpativeCardMatch(card, {Type: "Row", Text:"Sick leave taken"}));
      Assert(CountRows(Filter(balance, And(IsNumber(Text),Value(Text)=0))=1)
    steps: |
      - Press "Try It!" to see that the value of **true** is returned
    relatedTasks:
      - "sick-days"
      - "leave-statement"
      - "meaning-match"
  - shortId: "meaning-match"
    title: "Meaning Match"
    description: "Validate that responses match using AI Prompt"
    code: |
      // Setup:
      Experimental.SimulateResponse({
        Type: "message", 
        When: {Pattern: "leave"},
        Then: {SendText: "What leave enquiry do you have?"}
      });
      // Code:
      Experimental.SendText("I have a question about my leave balance");
      Set(message, Experimental.FindMessage({Type:"message", Wait: True}));
      Experimental.ValidateMessage(message, {Type: "AIMatch", Text: "Validate that the response is helpful and polite"})
    steps: |
      - Press "Try It!" to see that the value of **true** is returned
    relatedTasks:
      - "sick-days"
      - "leave-statement"
      - "meaning-match"