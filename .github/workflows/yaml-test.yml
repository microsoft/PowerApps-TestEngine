name: YAML Integration Tests

on:
  workflow_call:
    inputs:
      parameter:
        required: true
        type: string
      environmentId:
        required: true
        type: string
      tenantId:
        required: true
        type: string
      testPlanFile:
        required: true
        type: string
      outputDirectory:
        required: true
        type: string
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v2
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: '/release split v1.0.0'
      - name: Integration Test
        env:
            user1Email: '${{ secrets.POWER_PLATFORM_USER }}'
            user1Password: '${{ secrets.POWER_PLATFORM_PASSWORD }}'
        run: |           
          cd src/PowerAppsTestEngine
          npm install -g playwright@1.22.0
          playwright install  
          echo ${{ inputs.parameter }}
          IFS='}' read -ra testplans <<< "${{ inputs.parameter }}"
          for testplan in "${testplans[@]}" 
            do
               echo $testplan
               echo "args"
               IFS=',' read -ra args <<< "$testplan"
               envId=''
               tenantId=''
               testPlanFile=''
               outputDir=''
               for arg in "${args[@]}" 
                 do                    
                    if [[ $arg == *"environmentId"* ]]; then
                        IFS=':' read -ra value <<< "$arg"
                        for index in "${!value[@]}" 
                          do
                            if [[ $index == 1 ]]; then
                              envId=${value[$index]} 
                              break
                            fi  
                          done
                    fi
                    if [[ $arg == *"tenantId"* ]]; then
                        IFS=':' read -ra value <<< "$arg"
                        for index in "${!value[@]}" 
                          do
                            if [[ $index == 1 ]]; then
                              tenantId=${value[$index]} 
                              break
                            fi  
                          done
                    fi
                    if [[ $arg == *"testPlanFile"* ]]; then
                        IFS=':' read -ra value <<< "$arg"
                        for index in "${!value[@]}" 
                          do
                            if [[ $index == 1 ]]; then
                              testPlanFile=${value[$index]} 
                              break
                            fi  
                          done
                    fi
                    if [[ $arg == *"outputDirectory"* ]]; then
                        IFS=':' read -ra value <<< "$arg"
                        for index in "${!value[@]}" 
                          do
                            if [[ $index == 1 ]]; then
                              outputDir=${value[$index]} 
                              break
                            fi  
                          done
                    fi                                                         
                 done
               echo $envId
               echo $tenantId
               echo $testPlanFile
               echo $outputDir  
               dotnet run -- -e ${envId} -t ${tenantId} -i ${testPlanFile} -o ${outputDir};  
               echo "NEW"
            done
          
      - name: Sample Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Sample Tests          # Name of the check run which will be created
          path: |
            **/*.trx
          reporter: dotnet-trx        # Format of test results      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        if: ${{always()}}
        with:
            name: 'Test Run'
            path: |
                **/TestResults/**