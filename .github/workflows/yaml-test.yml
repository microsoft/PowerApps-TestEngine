name: YAML Integration Tests

on:
  workflow_call:
    inputs:
      parameters:
        required: true
        type: string
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v2
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: '/release split v1.0.0'
      - name: Integration Test
        env:
            user1Email: '${{ secrets.POWER_PLATFORM_USER }}'
            user1Password: '${{ secrets.POWER_PLATFORM_PASSWORD }}'
        run: |           
          cd src/PowerAppsTestEngine
          npm install -g playwright@1.22.0
          playwright install  
          IFS='}' read -ra testplans <<< "${{ inputs.parameters }}"
          for testplan in "${testplans[@]}" 
            do
               if [ -n "${testplan}" ]; then
                   IFS=',' read -ra args <<< "$testplan"
                   envId=''
                   tenantId=''
                   testPlanFile=''
                   outputDir=''
                   for arg in "${args[@]}" 
                     do      
                        if [[ $arg == *"environmentId"* ]]; then
                            IFS=':' read -ra value <<< "$arg"
                            envId=${value[1]}
                        fi
                        if [[ $arg == *"tenantId"* ]]; then
                            IFS=':' read -ra value <<< "$arg"
                            tenantId=${value[1]}
                        fi
                        if [[ $arg == *"testPlanFile"* ]]; then
                            IFS=':' read -ra value <<< "$arg"
                            testPlanFile=${value[1]}
                        fi
                        if [[ $arg == *"outputDirectory"* ]]; then
                            IFS=':' read -ra value <<< "$arg"
                            outputDir=${value[1]}
                        fi                                                         
                     done
                   echo ${testplan}
                   echo ${tenantId}
                   echo "next Tenant"
                   dotnet run -- -e ${envId} -t ${tenantId} -i ${testPlanFile} -o ${outputDir};  
               fi
            done
          
      - name: Sample Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Sample Tests          # Name of the check run which will be created
          path: |
            **/*.trx
          reporter: dotnet-trx        # Format of test results      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        if: ${{always()}}
        with:
            name: 'Test Run'
            path: |
                **/TestResults/**